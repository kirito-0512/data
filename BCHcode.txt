40779,
BCHcode,
In coding theory, the Bose–Chaudhuri–Hocquenghem codes (BCH codes) form a class of cyclic error-correcting codes that are constructed using polynomials over a finite field (also called Galois field). BCH codes were invented in 1959 by French mathematician Alexis Hocquenghem, and independently in 1960 by Raj Chandra Bose and D.K. Ray-Chaudhuri.[1][2][3] The name Bose–Chaudhuri–Hocquenghem (and the acronym BCH) arises from the initials of the inventors' surnames (mistakenly, in the case of Ray-Chaudhuri).
One of the key features of BCH codes is that during code design, there is a precise control over the number of symbol errors correctable by the code. In particular, it is possible to design binary BCH codes that can correct multiple bit errors. Another advantage of BCH codes is the ease with which they can be decoded, namely, via an algebraic method known as syndrome decoding. This simplifies the design of the decoder for these codes, using small low-power electronic hardware.
BCH codes are used in applications such as satellite communications,[4] compact disc players, DVDs, disk drives, USB flash drives, solid-state drives,[5] quantum-resistant cryptography[6] and two-dimensional bar codes.
Given a prime number q and prime power qm with positive integers m and d such that d ≤ qm − 1, a primitive narrow-sense BCH code over the finite field (or Galois field) GF(q) with code length n = qm − 1 and distance at least d is constructed by the following method.
Let α be a primitive element of GF(qm).
For any positive integer i, let mi(x) be the minimal polynomial with coefficients in GF(q) of αi.
The generator polynomial of the BCH code is defined as the least common multiple g(x) = lcm(m1(x),…,md − 1(x)).
It can be seen that g(x) is a polynomial with coefficients in GF(q) and divides xn − 1.
Therefore, the polynomial code defined by g(x) is a cyclic code.
Let q = 2 and m = 4 (therefore n = 15). We will consider different values of d for GF(16) = GF(24) based on the reducing polynomial z4 + z + 1, using primitive element α(z) = z. There are fourteen minimum polynomials mi(x) with coefficients in GF(2) satisfying
The minimal polynomials are
The BCH code with 
d
=
2
,
3
{\displaystyle d=2,3}
 has generator polynomial
It has minimal Hamming distance at least 3 and corrects up to one error. Since the generator polynomial is of degree 4, this code has 11 data bits and 4 checksum bits.
The BCH code with 
d
=
4
,
5
{\displaystyle d=4,5}
 has generator polynomial
It has minimal Hamming distance at least 5 and corrects up to two errors. Since the generator polynomial is of degree 8, this code has 7 data bits and 8 checksum bits.
The BCH code with 
d
=
6
,
7
{\displaystyle d=6,7}
 has generator polynomial
It has minimal Hamming distance at least 7 and corrects up to three errors. Since the generator polynomial is of degree 10, this code has 5 data bits and 10 checksum bits. (This particular generator polynomial has a real-world application, in the format patterns of the QR code.)
The BCH code with 
d
=
8
{\displaystyle d=8}
 and higher has generator polynomial
This code has minimal Hamming distance 15 and corrects 7 errors. It has 1 data bit and 14 checksum bits. In fact, this code has only two codewords: 000000000000000 and 111111111111111.
General BCH codes differ from primitive narrow-sense BCH codes in two respects.
First, the requirement that 
α
{\displaystyle \alpha }
 be a primitive element of 
G
F
(
q
m
)
{\displaystyle \mathrm {GF} (q^{m})}
 can be relaxed. By relaxing this requirement, the code length changes from 
q
m
−
1
{\displaystyle q^{m}-1}
 to 
o
r
d
(
α
)
,
{\displaystyle \mathrm {ord} (\alpha ),}
 the order of the element 
α
.
{\displaystyle \alpha .}
Second, the consecutive roots of the generator polynomial may run from 
α
c
,
…
,
α
c
+
d
−
2
{\displaystyle \alpha ^{c},\ldots ,\alpha ^{c+d-2}}
 instead of 
α
,
…
,
α
d
−
1
.
{\displaystyle \alpha ,\ldots ,\alpha ^{d-1}.}
Definition. Fix a finite field 
G
F
(
q
)
,
{\displaystyle GF(q),}
 where 
q
{\displaystyle q}
 is a prime power. Choose positive integers 
m
,
n
,
d
,
c
{\displaystyle m,n,d,c}
 such that 
2
≤
d
≤
n
,
{\displaystyle 2\leq d\leq n,}
g
c
d
(
n
,
q
)
=
1
,
{\displaystyle {\rm {gcd}}(n,q)=1,}
  and 
m
{\displaystyle m}
 is the multiplicative order of 
q
{\displaystyle q}
 modulo 
n
.
{\displaystyle n.}
As before, let 
α
{\displaystyle \alpha }
 be a primitive 
n
{\displaystyle n}
th root of unity in 
G
F
(
q
m
)
,
{\displaystyle GF(q^{m}),}
 and let 
m
i
(
x
)
{\displaystyle m_{i}(x)}
 be the minimal polynomial over 
G
F
(
q
)
{\displaystyle GF(q)}
 of 
α
i
{\displaystyle \alpha ^{i}}
 for all 
i
.
{\displaystyle i.}
The generator polynomial of the BCH code is defined as the least common multiple 
g
(
x
)
=
l
c
m
(
m
c
(
x
)
,
…
,
m
c
+
d
−
2
(
x
)
)
.
{\displaystyle g(x)={\rm {lcm}}(m_{c}(x),\ldots ,m_{c+d-2}(x)).}
Note: if 
n
=
q
m
−
1
{\displaystyle n=q^{m}-1}
 as in the simplified definition, then 
g
c
d
(
n
,
q
)
{\displaystyle {\rm {gcd}}(n,q)}
 is 1, and the order of 
q
{\displaystyle q}
 modulo 
n
{\displaystyle n}
 is 
m
.
{\displaystyle m.}
Therefore, the simplified definition is indeed a special case of the general one.
The generator polynomial 
g
(
x
)
{\displaystyle g(x)}
 of a BCH code has coefficients from 
G
F
(
q
)
.
{\displaystyle \mathrm {GF} (q).}
In general, a cyclic code over 
G
F
(
q
p
)
{\displaystyle \mathrm {GF} (q^{p})}
 with 
g
(
x
)
{\displaystyle g(x)}
 as the generator polynomial is called a BCH code over 
G
F
(
q
p
)
.
{\displaystyle \mathrm {GF} (q^{p}).}
The BCH code over 
G
F
(
q
m
)
{\displaystyle \mathrm {GF} (q^{m})}
 and generator polynomial 
g
(
x
)
{\displaystyle g(x)}
 with successive powers of 
α
{\displaystyle \alpha }
 as roots is one type of Reed–Solomon code where the decoder (syndromes) alphabet is the same as the channel (data and generator polynomial) alphabet, all elements of 
G
F
(
q
m
)
{\displaystyle \mathrm {GF} (q^{m})}
 .[7] The other type of Reed Solomon code is an original view Reed Solomon code which is not a BCH code.
The generator polynomial of a BCH code has degree at most 
(
d
−
1
)
m
{\displaystyle (d-1)m}
. Moreover, if 
q
=
2
{\displaystyle q=2}
 and 
c
=
1
{\displaystyle c=1}
, the generator polynomial has degree at most 
d
m
/
2
{\displaystyle dm/2}
.
Each minimal polynomial 
m
i
(
x
)
{\displaystyle m_{i}(x)}
 has degree at most 
m
{\displaystyle m}
. Therefore, the least common multiple of 
d
−
1
{\displaystyle d-1}
 of them has degree at most 
(
d
−
1
)
m
{\displaystyle (d-1)m}
. Moreover, if 
q
=
2
,
{\displaystyle q=2,}
 then 
m
i
(
x
)
=
m
2
i
(
x
)
{\displaystyle m_{i}(x)=m_{2i}(x)}
 for all 
i
{\displaystyle i}
. Therefore, 
g
(
x
)
{\displaystyle g(x)}
 is the least common multiple of at most 
d
/
2
{\displaystyle d/2}
 minimal polynomials 
m
i
(
x
)
{\displaystyle m_{i}(x)}
 for odd indices 
i
,
{\displaystyle i,}
 each of degree at most 
m
{\displaystyle m}
.
A BCH code has minimal Hamming distance at least 
d
{\displaystyle d}
.
Suppose that 
p
(
x
)
{\displaystyle p(x)}
 is a code word with fewer than 
d
{\displaystyle d}
 non-zero terms. Then
Recall that 
α
c
,
…
,
α
c
+
d
−
2
{\displaystyle \alpha ^{c},\ldots ,\alpha ^{c+d-2}}
 are roots of 
g
(
x
)
,
{\displaystyle g(x),}
 hence of 
p
(
x
)
{\displaystyle p(x)}
. This implies that 
b
1
,
…
,
b
d
−
1
{\displaystyle b_{1},\ldots ,b_{d-1}}
 satisfy the following equations, for each 
i
∈
{
c
,
…
,
c
+
d
−
2
}
{\displaystyle i\in \{c,\dotsc ,c+d-2\}}
:
In matrix form, we have
The determinant of this matrix equals
The matrix 
V
{\displaystyle V}
 is seen to be a Vandermonde matrix, and its determinant is
which is non-zero. It therefore follows that 
b
1
,
…
,
b
d
−
1
=
0
,
{\displaystyle b_{1},\ldots ,b_{d-1}=0,}
 hence 
p
(
x
)
=
0.
{\displaystyle p(x)=0.}
A BCH code is cyclic.
A polynomial code of length 
n
{\displaystyle n}
 is cyclic if and only if its generator polynomial divides 
x
n
−
1.
{\displaystyle x^{n}-1.}
 Since 
g
(
x
)
{\displaystyle g(x)}
 is the minimal polynomial with roots 
α
c
,
…
,
α
c
+
d
−
2
,
{\displaystyle \alpha ^{c},\ldots ,\alpha ^{c+d-2},}
 it suffices to check that each of 
α
c
,
…
,
α
c
+
d
−
2
{\displaystyle \alpha ^{c},\ldots ,\alpha ^{c+d-2}}
 is a root of 
x
n
−
1.
{\displaystyle x^{n}-1.}
 This follows immediately from the fact that 
α
{\displaystyle \alpha }
 is, by definition, an 
n
{\displaystyle n}
th root of unity.
Because any polynomial that is a multiple of the generator polynomial is a valid BCH codeword, BCH encoding is merely the process of finding some polynomial that has the generator as a factor.
The BCH code itself is not prescriptive about the meaning of the coefficients of the polynomial; conceptually, a BCH decoding algorithm's sole concern is to find the valid codeword with the minimal Hamming distance to the received codeword. Therefore, the BCH code may be implemented either as a systematic code or not, depending on how the implementor chooses to embed the message in the encoded polynomial.
The most straightforward way to find a polynomial that is a multiple of the generator is to compute the product of some arbitrary polynomial and the generator. In this case, the arbitrary polynomial can be chosen using the symbols of the message as coefficients.
As an example, consider the generator polynomial 
g
(
x
)
=
x
10
+
x
9
+
x
8
+
x
6
+
x
5
+
x
3
+
1
{\displaystyle g(x)=x^{10}+x^{9}+x^{8}+x^{6}+x^{5}+x^{3}+1}
, chosen for use in the (31, 21) binary BCH code used by POCSAG and others. To encode the 21-bit message {101101110111101111101}, we first represent it as a polynomial over 
G
F
(
2
)
{\displaystyle GF(2)}
:
Then, compute (also over 
G
F
(
2
)
{\displaystyle GF(2)}
):
Thus, the transmitted codeword is {1100111010010111101011101110101}.
The receiver can use these bits as coefficients in 
s
(
x
)
{\displaystyle s(x)}
 and, after error-correction to ensure a valid codeword, can recompute 
p
(
x
)
=
s
(
x
)
/
g
(
x
)
{\displaystyle p(x)=s(x)/g(x)}
A systematic code is one in which the message appears verbatim somewhere within the codeword. Therefore, systematic BCH encoding involves first embedding the message polynomial within the codeword polynomial, and then adjusting the coefficients of the remaining (non-message) terms to ensure that 
s
(
x
)
{\displaystyle s(x)}
 is divisible by 
g
(
x
)
{\displaystyle g(x)}
.
This encoding method leverages the fact that subtracting the remainder from a dividend results in a multiple of the divisor. Hence, if we take our message polynomial 
p
(
x
)
{\displaystyle p(x)}
 as before and multiply it by 
x
n
−
k
{\displaystyle x^{n-k}}
 (to "shift" the message out of the way of the remainder), we can then use Euclidean division of polynomials to yield:
Here, we see that 
q
(
x
)
g
(
x
)
{\displaystyle q(x)g(x)}
 is a valid codeword. As 
r
(
x
)
{\displaystyle r(x)}
 is always of degree less than 
n
−
k
{\displaystyle n-k}
 (which is the degree of 
g
(
x
)
{\displaystyle g(x)}
), we can safely subtract it from 
p
(
x
)
x
n
−
k
{\displaystyle p(x)x^{n-k}}
 without altering any of the message coefficients, hence we have our 
s
(
x
)
{\displaystyle s(x)}
 as
Over 
G
F
(
2
)
{\displaystyle GF(2)}
 (i.e. with binary BCH codes), this process is indistinguishable from appending a cyclic redundancy check, and if a systematic binary BCH code is used only for error-detection purposes, we see that BCH codes are just a generalization of the mathematics of cyclic redundancy checks.
The advantage to the systematic coding is that the receiver can recover the original message by discarding everything after the first 
k
{\displaystyle k}
 coefficients, after performing error correction.
There are many algorithms for decoding BCH codes. The most common ones follow this general outline:
During some of these steps, the decoding algorithm may determine that the received vector has too many errors and cannot be corrected. For example, if an appropriate value of t is not found, then the correction would fail. In a truncated (not primitive) code, an error location may be out of range. If the received vector has more errors than the code can correct, the decoder may unknowingly produce an apparently valid message that is not the one that was sent.
The received vector 
R
{\displaystyle R}
 is the sum of the correct codeword 
C
{\displaystyle C}
 and an unknown error vector 
E
.
{\displaystyle E.}
 The syndrome values are formed by considering 
R
{\displaystyle R}
 as a polynomial and evaluating it at 
α
c
,
…
,
α
c
+
d
−
2
.
{\displaystyle \alpha ^{c},\ldots ,\alpha ^{c+d-2}.}
 Thus the syndromes are[8]
for 
j
=
c
{\displaystyle j=c}
 to 
c
+
d
−
2.
{\displaystyle c+d-2.}
Since 
α
j
{\displaystyle \alpha ^{j}}
 are the zeros of 
g
(
x
)
,
{\displaystyle g(x),}
 of which 
C
(
x
)
{\displaystyle C(x)}
 is a multiple, 
C
(
α
j
)
=
0.
{\displaystyle C\left(\alpha ^{j}\right)=0.}
 Examining the syndrome values thus isolates the error vector so one can begin to solve for it.
If there is no error, 
s
j
=
0
{\displaystyle s_{j}=0}
 for all 
j
.
{\displaystyle j.}
 If the syndromes are all zero, then the decoding is done.
If there are nonzero syndromes, then there are errors. The decoder needs to figure out how many errors and the location of those errors.
If there is a single error, write this as 
E
(
x
)
=
e
x
i
,
{\displaystyle E(x)=e\,x^{i},}
 where 
i
{\displaystyle i}
 is the location of the error and 
e
{\displaystyle e}
 is its magnitude. Then the first two syndromes are
so together they allow us to calculate 
e
{\displaystyle e}
 and provide some information about 
i
{\displaystyle i}
 (completely determining it in the case of Reed–Solomon codes).
If there are two or more errors,
It is not immediately obvious how to begin solving the resulting syndromes for the unknowns 
e
k
{\displaystyle e_{k}}
 and 
i
k
.
{\displaystyle i_{k}.}
The first step is finding, compatible with computed syndromes and with minimal possible 
t
,
{\displaystyle t,}
 locator polynomial:
Three popular algorithms for this task are:
Peterson's algorithm is the step 2 of the generalized BCH decoding procedure. Peterson's algorithm is used to calculate the error locator polynomial coefficients  
λ
1
,
λ
2
,
…
,
λ
v
{\displaystyle \lambda _{1},\lambda _{2},\dots ,\lambda _{v}}
 of a polynomial
Now the procedure of the Peterson–Gorenstein–Zierler algorithm.[9] Expect we have at least 2t syndromes sc, …, sc+2t−1. Let v = t.
Now that you have the 
Λ
(
x
)
{\displaystyle \Lambda (x)}
 polynomial, its roots can be found in the form 
Λ
(
x
)
=
(
α
i
1
x
−
1
)
(
α
i
2
x
−
1
)
⋯
(
α
i
v
x
−
1
)
{\displaystyle \Lambda (x)=\left(\alpha ^{i_{1}}x-1\right)\left(\alpha ^{i_{2}}x-1\right)\cdots \left(\alpha ^{i_{v}}x-1\right)}
 by brute force for example using the Chien search algorithm. The exponential
powers of the primitive element 
α
{\displaystyle \alpha }
 will yield the positions where errors occur in the received word; hence the name 'error locator' polynomial.
The zeros of Λ(x) are α−i1, …, α−iv.
Once the error locations are known, the next step is to determine the error values at those locations. The error values are then used to correct the received values at those locations to recover the original codeword.
For the case of binary BCH, (with all characters readable) this is trivial; just flip the bits for the received word at these positions, and we have the corrected code word. In the more general case, the error weights 
e
j
{\displaystyle e_{j}}
 can be determined by solving the linear system
However, there is a more efficient method known as the Forney algorithm.
Let
And the error evaluator polynomial[10]
Finally:
where
Than if syndromes could be explained by an error word, which could be nonzero only on positions 
i
k
{\displaystyle i_{k}}
, then error values are
For narrow-sense BCH codes, c = 1, so the expression simplifies to:
It is based on Lagrange interpolation and techniques of generating functions.
Consider 
S
(
x
)
Λ
(
x
)
,
{\displaystyle S(x)\Lambda (x),}
 and for the sake of simplicity suppose 
λ
k
=
0
{\displaystyle \lambda _{k}=0}
 for 
k
>
v
,
{\displaystyle k>v,}
 and 
s
k
=
0
{\displaystyle s_{k}=0}
 for 
k
>
c
+
d
−
2.
{\displaystyle k>c+d-2.}
 Then
We want to compute unknowns 
e
j
,
{\displaystyle e_{j},}
 and we could simplify the context by removing the 
(
x
α
i
j
)
d
−
1
{\displaystyle \left(x\alpha ^{i_{j}}\right)^{d-1}}
 terms. This leads to the error evaluator polynomial
Thanks to 
v
⩽
d
−
1
{\displaystyle v\leqslant d-1}
 we have
Thanks to 
Λ
{\displaystyle \Lambda }
 (the Lagrange interpolation trick) the sum degenerates to only one summand for 
x
=
α
−
i
k
{\displaystyle x=\alpha ^{-i_{k}}}
To get 
e
k
{\displaystyle e_{k}}
 we just should get rid of the product. We could compute the product directly from already computed roots 
α
−
i
j
{\displaystyle \alpha ^{-i_{j}}}
 of 
Λ
,
{\displaystyle \Lambda ,}
 but we could use simpler form.
As formal derivative
we get again only one summand in
So finally
This formula is advantageous when one computes the formal derivative of 
Λ
{\displaystyle \Lambda }
 form
yielding:
where
An alternate process of finding both the polynomial Λ and the error locator polynomial is based on Yasuo Sugiyama's adaptation of the Extended Euclidean algorithm.[11] Correction of unreadable characters could be incorporated to the algorithm easily as well.
Let 
k
1
,
.
.
.
,
k
k
{\displaystyle k_{1},...,k_{k}}
 be positions of unreadable characters. One creates polynomial localising these positions 
Γ
(
x
)
=
∏
i
=
1
k
(
x
α
k
i
−
1
)
.
{\displaystyle \Gamma (x)=\prod _{i=1}^{k}\left(x\alpha ^{k_{i}}-1\right).}
Set values on unreadable positions to 0 and compute the syndromes.
As we have already defined for the Forney formula let 
S
(
x
)
=
∑
i
=
0
d
−
2
s
c
+
i
x
i
.
{\displaystyle S(x)=\sum _{i=0}^{d-2}s_{c+i}x^{i}.}
Let us run extended Euclidean algorithm for locating least common divisor of polynomials 
S
(
x
)
Γ
(
x
)
{\displaystyle S(x)\Gamma (x)}
 and 
x
d
−
1
.
{\displaystyle x^{d-1}.}
The goal is not to find the least common divisor, but a polynomial 
r
(
x
)
{\displaystyle r(x)}
 of degree at most 
⌊
(
d
+
k
−
3
)
/
2
⌋
{\displaystyle \lfloor (d+k-3)/2\rfloor }
 and polynomials 
a
(
x
)
,
b
(
x
)
{\displaystyle a(x),b(x)}
 such that 
r
(
x
)
=
a
(
x
)
S
(
x
)
Γ
(
x
)
+
b
(
x
)
x
d
−
1
.
{\displaystyle r(x)=a(x)S(x)\Gamma (x)+b(x)x^{d-1}.}
Low degree of 
r
(
x
)
{\displaystyle r(x)}
 guarantees, that 
a
(
x
)
{\displaystyle a(x)}
 would satisfy extended (by 
Γ
{\displaystyle \Gamma }
) defining conditions for 
Λ
.
{\displaystyle \Lambda .}
Defining 
Ξ
(
x
)
=
a
(
x
)
Γ
(
x
)
{\displaystyle \Xi (x)=a(x)\Gamma (x)}
 and using 
Ξ
{\displaystyle \Xi }
 on the place of 
Λ
(
x
)
{\displaystyle \Lambda (x)}
 in the Fourney formula will give us error values.
The main advantage of the algorithm is that it meanwhile computes 
Ω
(
x
)
=
S
(
x
)
Ξ
(
x
)
mod
x
d
−
1
=
r
(
x
)
{\displaystyle \Omega (x)=S(x)\Xi (x){\bmod {x}}^{d-1}=r(x)}
 required in the Forney formula.
The goal is to find a codeword which differs from the received word minimally as possible on readable positions. When expressing the received word as a sum of nearest codeword and error word, we are trying to find error word with minimal number of non-zeros on readable positions. Syndrom 
s
i
{\displaystyle s_{i}}
 restricts error word by condition
We could write these conditions separately or we could create polynomial
and compare coefficients near powers 
0
{\displaystyle 0}
 to 
d
−
2.
{\displaystyle d-2.}
Suppose there is unreadable letter on position 
k
1
,
{\displaystyle k_{1},}
 we could replace set of syndromes 
{
s
c
,
⋯
,
s
c
+
d
−
2
}
{\displaystyle \{s_{c},\cdots ,s_{c+d-2}\}}
 by set of syndromes 
{
t
c
,
⋯
,
t
c
+
d
−
3
}
{\displaystyle \{t_{c},\cdots ,t_{c+d-3}\}}
 defined by equation 
t
i
=
α
k
1
s
i
−
s
i
+
1
.
{\displaystyle t_{i}=\alpha ^{k_{1}}s_{i}-s_{i+1}.}
 Suppose for an error word all restrictions by original set 
{
s
c
,
⋯
,
s
c
+
d
−
2
}
{\displaystyle \{s_{c},\cdots ,s_{c+d-2}\}}
 of syndromes hold,
than
New set of syndromes restricts error vector
the same way the original set of syndromes restricted the error vector 
e
j
.
{\displaystyle e_{j}.}
 Except the coordinate 
k
1
,
{\displaystyle k_{1},}
 where we have 
f
k
1
=
0
,
{\displaystyle f_{k_{1}}=0,}
 an 
f
j
{\displaystyle f_{j}}
 is zero, if 
e
j
=
0.
{\displaystyle e_{j}=0.}
 For the goal of locating error positions we could change the set of syndromes in the similar way to reflect all unreadable characters. This shortens the set of syndromes by 
k
.
{\displaystyle k.}
In polynomial formulation, the replacement of syndromes set 
{
s
c
,
⋯
,
s
c
+
d
−
2
}
{\displaystyle \{s_{c},\cdots ,s_{c+d-2}\}}
 by syndromes set 
{
t
c
,
⋯
,
t
c
+
d
−
3
}
{\displaystyle \{t_{c},\cdots ,t_{c+d-3}\}}
 leads to
Therefore,
After replacement of 
S
(
x
)
{\displaystyle S(x)}
 by 
S
(
x
)
Γ
(
x
)
{\displaystyle S(x)\Gamma (x)}
, one would require equation for coefficients near powers 
k
,
⋯
,
d
−
2.
{\displaystyle k,\cdots ,d-2.}
One could consider looking for error positions from the point of view of eliminating influence of given positions similarly as for unreadable characters. If we found 
v
{\displaystyle v}
 positions such that eliminating their influence leads to obtaining set of syndromes consisting of all zeros, than there exists error vector with errors only on these coordinates.
If 
Λ
(
x
)
{\displaystyle \Lambda (x)}
 denotes the polynomial eliminating the influence of these coordinates, we obtain
In Euclidean algorithm, we try to correct at most 
1
2
(
d
−
1
−
k
)
{\displaystyle {\tfrac {1}{2}}(d-1-k)}
 errors (on readable positions), because with bigger error count there could be more codewords in the same distance from the received word. Therefore, for 
Λ
(
x
)
{\displaystyle \Lambda (x)}
 we are looking for, the equation must hold for coefficients near powers starting from
In Forney formula, 
Λ
(
x
)
{\displaystyle \Lambda (x)}
 could be multiplied by a scalar giving the same result.
It could happen that the Euclidean algorithm finds 
Λ
(
x
)
{\displaystyle \Lambda (x)}
 of degree higher than 
1
2
(
d
−
1
−
k
)
{\displaystyle {\tfrac {1}{2}}(d-1-k)}
 having number of different roots equal to its degree, where the Fourney formula would be able to correct errors in all its roots, anyway correcting such many errors could be risky (especially with no other restrictions on received word). Usually after getting 
Λ
(
x
)
{\displaystyle \Lambda (x)}
 of higher degree, we decide not to correct the errors. Correction could fail in the case 
Λ
(
x
)
{\displaystyle \Lambda (x)}
 has roots with higher multiplicity or the number of roots is smaller than its degree. Fail could be detected as well by Forney formula returning error outside the transmitted alphabet.
Using the error values and error location, correct the errors and form a corrected code vector by subtracting error values at error locations.
Consider a BCH code in GF(24) with 
d
=
7
{\displaystyle d=7}
 and 
g
(
x
)
=
x
10
+
x
8
+
x
5
+
x
4
+
x
2
+
x
+
1
{\displaystyle g(x)=x^{10}+x^{8}+x^{5}+x^{4}+x^{2}+x+1}
. (This is used in QR codes.) Let the message to be transmitted be [1 1 0 1 1], or in polynomial notation, 
M
(
x
)
=
x
4
+
x
3
+
x
+
1.
{\displaystyle M(x)=x^{4}+x^{3}+x+1.}
The "checksum" symbols are calculated by dividing 
x
10
M
(
x
)
{\displaystyle x^{10}M(x)}
 by 
g
(
x
)
{\displaystyle g(x)}
 and taking the remainder, resulting in 
x
9
+
x
4
+
x
2
{\displaystyle x^{9}+x^{4}+x^{2}}
 or [ 1 0 0 0 0 1 0 1 0 0 ]. These are appended to the message, so the transmitted codeword is [ 1 1 0 1 1 1 0 0 0 0 1 0 1 0 0 ].
Now, imagine that there are two bit-errors in the transmission, so the received codeword is [ 1 0 0 1 1 1 0 0 0 1 1 0 1 0 0 ]. In polynomial notation:
In order to correct the errors, first calculate the syndromes. Taking 
α
=
0010
,
{\displaystyle \alpha =0010,}
 we have 
s
1
=
R
(
α
1
)
=
1011
,
{\displaystyle s_{1}=R(\alpha ^{1})=1011,}
s
2
=
1001
,
{\displaystyle s_{2}=1001,}
s
3
=
1011
,
{\displaystyle s_{3}=1011,}
s
4
=
1101
,
{\displaystyle s_{4}=1101,}
s
5
=
0001
,
{\displaystyle s_{5}=0001,}
 and 
s
6
=
1001.
{\displaystyle s_{6}=1001.}
Next, apply the Peterson procedure by row-reducing the following augmented matrix.
Due to the zero row, S3×3 is singular, which is no surprise since only two errors were introduced into the codeword.
However, the upper-left corner of the matrix is identical to [S2×2 | C2×1], which gives rise to the solution 
λ
2
=
1000
,
{\displaystyle \lambda _{2}=1000,}
λ
1
=
1011.
{\displaystyle \lambda _{1}=1011.}
The resulting error locator polynomial is 
Λ
(
x
)
=
1000
x
2
+
1011
x
+
0001
,
{\displaystyle \Lambda (x)=1000x^{2}+1011x+0001,}
 which has zeros at 
0100
=
α
−
13
{\displaystyle 0100=\alpha ^{-13}}
 and 
0111
=
α
−
5
.
{\displaystyle 0111=\alpha ^{-5}.}
The exponents of 
α
{\displaystyle \alpha }
 correspond to the error locations.
There is no need to calculate the error values in this example, as the only possible value is 1.
Suppose the same scenario, but the received word has two unreadable characters [ 1 0 0 ? 1 1 ? 0 0 1 1 0 1 0 0 ]. We replace the unreadable characters by zeros while creating the polynomial reflecting their positions 
Γ
(
x
)
=
(
α
8
x
−
1
)
(
α
11
x
−
1
)
.
{\displaystyle \Gamma (x)=\left(\alpha ^{8}x-1\right)\left(\alpha ^{11}x-1\right).}
 We compute the syndromes 
s
1
=
α
−
7
,
s
2
=
α
1
,
s
3
=
α
4
,
s
4
=
α
2
,
s
5
=
α
5
,
{\displaystyle s_{1}=\alpha ^{-7},s_{2}=\alpha ^{1},s_{3}=\alpha ^{4},s_{4}=\alpha ^{2},s_{5}=\alpha ^{5},}
 and 
s
6
=
α
−
7
.
{\displaystyle s_{6}=\alpha ^{-7}.}
 (Using log notation which is independent on GF(24) isomorphisms. For computation checking we can use the same representation for addition as was used in previous example. Hexadecimal description of the powers of 
α
{\displaystyle \alpha }
 are consecutively 1,2,4,8,3,6,C,B,5,A,7,E,F,D,9 with the addition based on bitwise xor.)
Let us make syndrome polynomial
compute
Run the extended Euclidean algorithm:
We have reached polynomial of degree at most 3, and as
we get
Therefore,
Let 
Λ
(
x
)
=
α
3
+
α
−
5
x
+
α
6
x
2
.
{\displaystyle \Lambda (x)=\alpha ^{3}+\alpha ^{-5}x+\alpha ^{6}x^{2}.}
 Don't worry that 
λ
0
≠
1.
{\displaystyle \lambda _{0}\neq 1.}
 Find by brute force a root of 
Λ
.
{\displaystyle \Lambda .}
 The roots are 
α
2
,
{\displaystyle \alpha ^{2},}
 and 
α
10
{\displaystyle \alpha ^{10}}
 (after finding for example 
α
2
{\displaystyle \alpha ^{2}}
 we can divide 
Λ
{\displaystyle \Lambda }
 by corresponding monom 
(
x
−
α
2
)
{\displaystyle \left(x-\alpha ^{2}\right)}
 and the root of resulting monom could be found easily).
Let
Let us look for error values using formula
where 
α
−
i
j
{\displaystyle \alpha ^{-i_{j}}}
 are roots of 
Ξ
(
x
)
.
{\displaystyle \Xi (x).}
Ξ
′
(
x
)
=
α
2
x
2
.
{\displaystyle \Xi '(x)=\alpha ^{2}x^{2}.}
 We get
Fact, that 
e
3
=
e
4
=
1
,
{\displaystyle e_{3}=e_{4}=1,}
 should not be surprising.
Corrected code is therefore [ 1 1 0 1 1 1 0 0 0 0 1 0 1 0 0].
Let us show the algorithm behaviour for the case with small number of errors. Let the received word is [ 1 0 0 ? 1 1 ? 0 0 0 1 0 1 0 0 ].
Again, replace the unreadable characters by zeros while creating the polynomial reflecting their positions 
Γ
(
x
)
=
(
α
8
x
−
1
)
(
α
11
x
−
1
)
.
{\displaystyle \Gamma (x)=\left(\alpha ^{8}x-1\right)\left(\alpha ^{11}x-1\right).}
Compute the syndromes 
s
1
=
α
4
,
s
2
=
α
−
7
,
s
3
=
α
1
,
s
4
=
α
1
,
s
5
=
α
0
,
{\displaystyle s_{1}=\alpha ^{4},s_{2}=\alpha ^{-7},s_{3}=\alpha ^{1},s_{4}=\alpha ^{1},s_{5}=\alpha ^{0},}
 and 
s
6
=
α
2
.
{\displaystyle s_{6}=\alpha ^{2}.}
Create syndrome polynomial
Let us run the extended Euclidean algorithm:
We have reached polynomial of degree at most 3, and as
we get
Therefore,
Let 
Λ
(
x
)
=
α
3
+
α
1
x
.
{\displaystyle \Lambda (x)=\alpha ^{3}+\alpha ^{1}x.}
 Don't worry that 
λ
0
≠
1.
{\displaystyle \lambda _{0}\neq 1.}
 The root of 
Λ
(
x
)
{\displaystyle \Lambda (x)}
 is 
α
3
−
1
.
{\displaystyle \alpha ^{3-1}.}
Let 
Let us look for error values using formula 
e
j
=
−
Ω
(
α
−
i
j
)
/
Ξ
′
(
α
−
i
j
)
,
{\displaystyle e_{j}=-\Omega \left(\alpha ^{-i_{j}}\right)/\Xi '\left(\alpha ^{-i_{j}}\right),}
 where 
α
−
i
j
{\displaystyle \alpha ^{-i_{j}}}
 are roots of polynomial 
Ξ
(
x
)
.
{\displaystyle \Xi (x).}
We get
The fact that 
e
3
=
1
{\displaystyle e_{3}=1}
 should not be surprising.
Corrected code is therefore [ 1 1 0 1 1 1 0 0 0 0 1 0 1 0 0].
