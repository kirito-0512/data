34358,
Yacc,
Yacc (Yet Another Compiler-Compiler) is a computer program for the Unix operating system developed by Stephen C. Johnson.  It is a Look Ahead Left-to-Right Rightmost Derivation (LALR) parser generator, generating a LALR parser (the part of a compiler that tries to make syntactic sense of the source code) based on a formal grammar, written in a notation similar to Backusâ€“Naur Form (BNF).[1] Yacc is supplied as a standard utility on BSD and AT&T Unix.[2] GNU-based Linux distributions include Bison, a forward-compatible Yacc replacement.[3]
In the early 1970s, Stephen C. Johnson, a computer scientist at Bell Labs / AT&T, developed Yacc because he wanted to insert an exclusive or operator into a B language compiler[additional citation(s) needed] (developed using McIlroy's TMG compiler-compiler[4]), but it turned out to be a hard task. As a result, he was directed by his colleague at Bell Labs Al Aho to Donald Knuth's work on LR parsing, which served as the basis for Yacc.[5] Yacc was influenced by[6] and received its name in reference to TMG compiler-compiler.[7]
Yacc was originally written in the B programming language, but was soon rewritten in C by Alan Snyder.[4] It appeared as part of Version 3 Unix,[8] and a full description of Yacc was published in 1975.[6]
Johnson used Yacc to create the Portable C Compiler.[8] Bjarne Stroustrup also attempted to use Yacc to create a formal specification of C++, but "was defeated by C's syntax".[9] While finding it unsuitable for a formal specification of the language, Stroustrup did proceed to use Yacc to implement Cfront, the first implementation of C++.[10]
In a 2008 interview, Johnson reflected that "the contribution Yacc made to the spread of Unix and C is what I'm proudest of".[11]
The input to Yacc is a grammar with snippets of C code (called "actions") attached to its rules. Its output is a shift-reduce parser in C that executes the C snippets associated with each rule as soon as the rule is recognized. Typical actions involve the construction of parse trees. Using an example from Johnson, if the call node(label, left, right) constructs a binary parse tree node with the specified label and children, then the rule
recognizes summation expressions and constructs nodes for them. The special identifiers $$, $1 and $3 refer to items on the parser's stack.[6]
Yacc produces only a parser (phrase analyzer); for full syntactic analysis this requires an external lexical analyzer to perform the first tokenization stage (word analysis), which is then followed by the parsing stage proper.[6] Lexical analyzer generators, such as Lex or Flex, are widely available. The IEEE POSIX P1003.2 standard defines the functionality and requirements for both Lex and Yacc.[12]
Some versions of AT&T Yacc have become open source. For example, source code is available with the standard distributions of Plan 9.[13]
Yacc and similar programs (largely reimplementations) have been very popular. Yacc itself used to be available as the default parser generator on most Unix systems, though it has since been supplanted by more recent, largely compatible, programs such as Berkeley Yacc, GNU Bison, MKS Yacc, and Abraxas PCYACC. An updated version of the original AT&T Yacc is included as part of Sun's OpenSolaris project. Each offers slight improvements and additional features over the original Yacc, but the concept and basic syntax have remained the same.[14]
Among the languages that were first implemented with Yacc are AWK, C++,[10] eqn and Pic.[15] Yacc was also used on Unix to implement the Portable C Compiler, as well as parsers for such programming languages as FORTRAN 77, Ratfor, APL, bc, m4, etc.[8][16]
Yacc has also been rewritten for other languages, including OCaml,[17] Ratfor, ML, Ada, Pascal, Java, Python, Ruby, Go,[18] Common Lisp[19] and Erlang.[20]



Information box
{'Original author(s)': 'Stephen C. Johnson', 'Repository': 'www.tuhs.org/cgi-bin/utree.pl?file=V6%2Fusr%2Fsource%2Fyacc', 'Written in': 'C', 'Operating system': 'Unix, Unix-like, Plan 9, Inferno', 'Platform': 'Cross-platform', 'Type': 'Command', 'License': 'Plan 9: MIT License'}