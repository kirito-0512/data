32478,
Vim(texteditor),

Vim (/vɪm/;[5] a contraction of Vi IMproved) is a free and open-source, screen-based text editor program. It is an improved clone of Bill Joy's vi. Vim's author, Bram Moolenaar, derived Vim from a port of the Stevie editor for Amiga[6] and released a version to the public in 1991. Vim is designed for use both from a command-line interface and as a standalone application in a graphical user interface.[7]
Since its release for the Amiga, cross-platform development has made it available on many other systems. In 2018, it was voted the most popular editor amongst Linux Journal readers;[8] in 2015 the Stack Overflow developer survey found it to be the third most popular text editor,[9] and in 2019 the fifth most popular development environment.[10]
Vim's forerunner, Stevie (ST Editor for VI Enthusiasts), was created by Tim Thompson for the Atari ST in 1987[11][12] and further developed by Tony Andrews[11][13] and G.R. (Fred) Walter.[14][15]
Basing his work on Stevie, Bram Moolenaar began working on Vim for the Amiga computer in 1988, with the first public release (Vim v1.14) in 1991.[16][17][better source needed]
At the time of its first release, the name "Vim" was an acronym for "Vi IMitation", but this changed to "'Vi IMproved" late in 1993.[18]
Vim is released under the Vim license, which includes some charityware clauses that encourage users who enjoy the software to consider donating to children in Uganda.[4] The Vim license is compatible with the GNU General Public License through a special clause allowing distribution of modified copies under the GNU GPL version 2.0 or later.[4]
Like vi, Vim's interface is not based on menus or icons but on commands given in a text user interface; its GUI mode, gVim, adds menus and toolbars for commonly used commands but the full functionality is still expressed through its command line mode. Vi (and by extension Vim) tends to allow a typist to keep their fingers on the home row, which can be an advantage for a touch typist.[32]
Vim has a built-in tutorial for beginners called vimtutor, which is usually installed along with Vim, but is a separate executable and can be run with a shell command.[33] The Vim Users' Manual details Vim's features and can be read from within Vim, or found online.[34][35]
Vim also has a built-in help facility (using the :help command) which allows users to query and navigate through commands and features.
Vim features various special memory entries called registers (not to be confused with hardware or processor registers). When cutting, deleting, copying, or pasting text the user can choose to store the manipulated text in a register. There are 36 general-purpose registers associated with letters and numbers ([a-z0-9]) and a range of special ones that either contain special values (current filename, last command, etc.) or serve a special purpose.[7]: 85 
Like vi, vim supports multiple editing modes. Depending on the mode, typed characters are interpreted either as sequences of commands or are inserted as text. In Vim there are 12 editing modes, 6 basic modes and 6 variants:[36]
Vim is highly customizable and extensible, making it an attractive tool for users who demand a large amount of control and flexibility over their text editing environment.[38] Text input is facilitated by a variety of features designed to increase keyboard efficiency. Users can execute complex commands with "key mappings," which can be customized and extended. The "recording" feature allows for the creation of macros to automate sequences of keystrokes and call internal or user-defined functions and mappings. Abbreviations, similar to macros and key mappings, facilitate the expansion of short strings of text into longer ones and can also be used to correct mistakes. Vim also features an "easy" mode for users looking for a simpler text editing solution.[39]
There are many plugins available that extend or add new functionality to Vim. These plugins are usually written in Vim's internal scripting language, vimscript (also known as VimL),[40] but can be written in other languages as well.
There are projects bundling together complex scripts and customizations and aimed at turning Vim into a tool for a specific task or adding a major flavour to its behaviour. Examples include Cream, which makes Vim behave like a click-and-type editor, or VimOutliner, which provides a comfortable outliner for users of Unix-like systems.
Vim has a vi compatibility mode, but when that mode is not used, Vim has many enhancements over vi.[41] However even in compatibility mode, Vim is not entirely compatible with vi as defined in the Single Unix Specification[42] and POSIX (e.g., Vim does not support vi's open mode, only visual mode). Vim's developers state that it is "very much compatible with Vi".[43]
Some of Vim's enhancements include completion functions, comparison and merging of files (known as vimdiff), a comprehensive integrated help system, extended regular expressions, scripting languages (both native and through alternative scripting interpreters such as Perl, Python, Ruby, Tcl, etc.) including support for plugins, a graphical user interface (gvim), limited integrated development environment-like features, mouse interaction (both with and without the GUI), folding, editing of compressed or archived files in gzip, bzip2, zip, and tar format and files over network protocols such as SSH, FTP, and HTTP, session state preservation, spell checking, split (horizontal and vertical) and tabbed windows, Unicode and other multi-language support, syntax highlighting, trans-session command, search and cursor position histories, multiple level and branching undo/redo history which can persist across editing sessions, and visual mode.
While running, Vim saves the user's changes in a swap file with the ".swp" extension. This file can be used to recover after a crash. If a user tries to open a file and a swap file already exists, Vim will warn the user, and if the user proceeds, Vim will use a swap file with the extension ".swo" (or, if there is already more than one swap file, ".swn", ".swm", etc.).[44][45] The feature can be disabled.[46]
Vim script (also called Vimscript or VimL)[47] is the scripting language built into Vim.[48] Based on the ex editor language of the original vi editor, early versions of Vim added commands for control flow and function definitions. Since version 7, Vim script also supports more advanced data types such as lists and dictionaries and a simple form of object-oriented programming. Built-in functions such as map() and filter() allow a basic form of functional programming, and Vim script has lambda since version 8.0. Vim script is mostly written in an imperative programming style.
Vim macros can contain a sequence of normal-mode commands, but can also invoke ex commands or functions written in Vim script for more complex tasks. Almost all extensions (called plugins or more commonly scripts) of the core Vim functionality are written in Vim script, but plugins can also utilize other languages like Perl,[49] Python,[50] Lua,[51] Ruby,[52] Tcl,[53]  or Racket.[54] These plugins can be installed manually, or through a plugin manager such as Vundle, Pathogen, or Vim-Plug.
Vim script files are stored as plain text, similarly to other code, and the filename extension is usually .vim. One notable exception to that is Vim's config file, .vimrc.
While vi was originally available only on Unix operating systems, Vim has been ported to many operating systems including AmigaOS (the initial target platform), Atari MiNT, BeOS, DOS, Windows starting from Windows NT 3.1, OS/2, OS/390, MorphOS, OpenVMS, QNX, RISC OS, Linux, BSD, and Classic Mac OS.[55]  Also, Vim is shipped with Apple macOS.[56]
Independent ports of Vim are available for Android[57][58] and iOS.[59]
Neovim[62] is a fork of Vim that strives to improve the extensibility and maintainability of Vim.[63] Some features of the fork include built-in Language Server Protocol support, support for asynchronous I/O, and support for Lua scripting using luaJIT language interpreter.[64][a] The project is free software and its source code is available on GitHub.[65]
Neovim has the same configuration syntax as Vim (unless vim9script is used); thus the same configuration file can be used with both editors, although there are minor differences in details of options.[66] If the added features of Neovim are not used, Neovim is compatible with almost all of Vim's features.[67]
The Neovim project was started in 2014, after a patch to Vim supporting multi-threading was rejected.[68] Neovim had a successful fundraising in March 2014, supporting at least one full-time developer.[69][70]
Several frontends are under development which make use of Neovim's capabilities.[71][72][73]
With the 0.5 release of Neovim on July 2, 2021, it gained built-in support for the Language Server Protocol, tree-sitter, and more complete Lua support – including the ability to write the main configuration file in Lua instead of VimL.[74]
Neovim featuring configured statusbar and dark colorscheme.
Tweaked v0.9.0-dev version.



Information box
{'Original author(s)': 'Bram Moolenaar', 'Initial release': 'November 1, 2015; 7 years ago[60]', 'Stable release': '0.9.1[61]  / 29 May 2023; 37 days ago[60]', 'Repository': 'https://github.com/neovim/neovim', 'Written in': 'C, Vim script, Lua', 'Operating system': 'Microsoft Windows and Unix-like', 'Type': 'Text editor', 'License': 'Apache-2.0', 'Website': 'neovim.io', 'Other names': 'NVim'}