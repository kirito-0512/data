31105,
Turing(programminglanguage),
Turing is a high-level, general-purpose programming language developed in 1982 by Ric Holt and James Cordy, at University of Toronto in Ontario, Canada. It was designed in order to help students taking their first computer science course learn how to code. Turing is a descendant of Pascal, Euclid, and SP/k that features a clean syntax and precise machine-independent semantics.
Turing 4.1.0 is the latest stable version of Turing. Turing 4.1.1 and Turing 4.1.2 does not allow stand alone .exe files to be created and versions before Turing 4.1.0 have outdated syntax and outdated functions.
Named after British computer scientist Alan Turing, Turing is used primarily as a teaching language at the high school and university level.[1] Two other versions exist, Object-Oriented Turing and Turing Plus, a systems programming variant. In September 2001, "Object Oriented Turing" was renamed "Turing" and the original Turing was renamed "Classic Turing". Turing is no longer supported by Holt Software Associates in Toronto, Ontario. Turing was widely used in high schools in Ontario as an introduction to programming.[2]
On November 28, 2007, Turing, which was previously a commercial programming language, became freeware, available to download from the developer's website free of charge for personal, commercial, and educational use.[3][4][5]
The makers of Turing, Holt Software Associates, have since ceased operations, and Turing has seen no further development since November 25, 2007.[4]
Turing is designed to have a very lightweight, readable, intuitive syntax. Here is the entire Hello World! program in Turing with syntax highlighting:
Turing avoids semicolons and braces, using explicit end markers for most language constructs instead, and allows declarations anywhere. Here is a complete program defining and using the traditional recursive function to calculate a factorial.
Currently, there are two open source alternative implementations of Turing: Open Turing, an open source version of the original interpreter, and TPlus, a native compiler for the concurrent systems programming language variant Turing Plus. OpenT, a project to develop a compiler for Turing, is no longer in development.
Open Turing is an open-source implementation of the original Turing interpreter for Windows written by Tristan Hume. It includes speed improvements, new features such as OpenGL 3D and a new code editor. It is fully backwards compatible with the closed-source implementation.[6]
TPlus is an open-source implementation of original (non-Object-Oriented) Turing with systems programming extensions developed at the University of Toronto and ported to Linux, Solaris and Mac OS X at Queen's University in the late 1990s.[7]  TPlus implements Turing+ (Turing Plus), a concurrent systems programming language based on the original Turing programming language. Some, but not all, of the features of Turing Plus were eventually subsumed into the present Object-Oriented Turing language. Turing Plus extends original Turing with processes and monitors (as specified by C.A.R. Hoare) as well as language constructs needed for systems programming such as binary input-output, separate compilation, variables at absolute addresses, type converters and other features.
Turing+ (Turing Plus) is a concurrent systems programming language based on the Turing programming language designed by James Cordy and Ric Holt, then at the University of Toronto, Canada, in 1987.  Some, but not all, of the features of Turing+ were eventually subsumed into Object-Oriented Turing.  Turing+ extended original Turing with processes and monitors (as specified by C.A.R. Hoare) as well as language constructs needed for systems programming such as binary input-output, separate compilation, variables at absolute addresses, type converters and other features.
Turing+ was explicitly designed to replace Concurrent Euclid in systems-programming applications.  The TUNIS operating system, originally written in Concurrent Euclid, was recoded to Turing+ in its MiniTunis implementation.  Turing+ has been used to implement several production software systems, including the TXL programming language.
Object-Oriented Turing is an extension of the Turing programming language and a replacement for Turing Plus created by Ric Holt[8][9] of the University of Toronto, Canada, in 1991. It is imperative, object-oriented, and concurrent. It has modules, classes, single inheritance, processes, exception handling, and optional machine-dependent programming.
There is an integrated development environment under the X Window System and a demo version.[citation needed] Versions exist for Sun-4, MIPS, RS-6000, NeXTSTEP, Windows 95 and others. 



Information box
{'Paradigm': 'multi-paradigm: object-oriented, procedural, concurrent', 'Designed by': 'Ric Holt', 'Developer': 'Ric Holt', 'First appeared': '1991', 'Typing discipline': 'static, manifest', 'OS': 'Cross-platform: Sun-4, MIPS, RS-6000'}