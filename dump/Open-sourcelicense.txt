22290,
Open-sourcelicense,

Open-source licenses facilitate free and open-source software (FOSS) development. Intellectual property (IP) laws restrict the modification and sharing of creative works. Free and open-source software licenses use these existing legal structures for the inverse purpose of granting freedoms that promote sharing and collaboration. They grant the recipient the rights to use the software, examine the source code, modify it, and distribute the modifications. These licenses target computer software where source code can be necessary to create modifications. They also cover situations where there is no difference between the source code and the executable program distributed to end users. Open-source licenses can cover hardware, infrastructure, drinks, books, and music.
There are two broad categories of open-source licenses, permissive and copyleft. Permissive licenses originate in academia. They grant the rights to modify and distribute with certain conditions. These academic licenses usually require attribution to credit the original authors and a disclaimer of warranty. Copyleft licenses have their origins in the free software movement. Copyleft also requires attribution, disclaims warranties, and grants the rights to modify and distribute. The difference is that copyleft demands reciprocity. Any derivative works must be distributed with the source code under a copyleft license.
Intellectual property is a legal category that treats works of creativity comparable physical property. Legal systems give the property owner the right to restrict access in many way. IP law gives creators limited control over intellectual creations like literature and technology. Owners can sell, lease, gift, or license their IP. Multiple types of IP cover software including trademarks, patents, and copyrights.[1]
Most countries, including the United States (US), have created copyright laws in line with the Berne Convention.[2] These laws assign a copyright whenever a work is released in any fixed format.[3] Under US copyright law, the initial expression is called the original work. The creator, or their employer, holds the copyright to this original work. They alone are permitted to make copies, release modified versions, distribute copies, perform publicly, or display the work publicly. Under US copyright law, modified versions of the original work are called derivative works. When a creator modifies an existing work, they hold the copyright to their modifications. Unless the original work was in the public domain, a derivative work can only be distributed with the permission of every copyright holder.[1]
In 1980, the US government amended the law to treat software as a literary work. Software released after this point was automatically restricted by IP laws.[4] At that time, American activist and programmer Richard Stallman was working as a graduate student at the MIT Computer Science and Artificial Intelligence Laboratory. Stallman witnessed the fragmentation that proprietary software caused, and founded the free software movement. Throughout the 1980s, he started the GNU Project to create a free operating system, wrote essays on freedom, founded the Free Software Foundation (FSF), and wrote several free software licenses. The FSF used existing intellectual property laws for the opposite of their intended goal of restriction. Instead of imposing restrictions, free software explicitly provided freedoms to the recipient.[5]
In 1998, Bruce Perens and Eric S. Raymond founded the Open Source Initiative (OSI). Both were active members of the free software community. At Debian, Perens had written the Debian Free Software Guidelines (DFSG). He used this as the basis for The Open Source Definition. An open-source license is one that complies with this definition, and therefore provides software freedom.[6] Eric S. Raymond was a strong proponent of the name "open source" over free software. He viewed open source as more appealing to businesses and more reflective of the tangible advantages of FOSS development. One of Raymond's goals was to expand the existing hacker community to include large commercial developers.[7] In The Cathedral and the Bazaar, Raymond compared open-source development to the bazaar, an open-air public market. He argued that aside from ethics, the open model provided advantages that proprietary software could not replicate. Raymond focused heavily on feedback, testing, and bug reports. He contrasted the proprietary model where small pools of secretive workers would carry out this work with the development of Linux where the pool of testers included potentially the entire world. He summarized this strength as "Given
enough eyeballs, all bugs are shallow."[8] The OSI succeeded in bringing open-source development to corporate developers including Sun Microsystems, IBM, Netscape, Mozilla, Apache, Apple Inc., Microsoft, and Nokia. These companies released code under existing licenses and drafted their own to be approved by the OSI.[9]
Open-source licenses are categorized as copyleft or permissive. Copyleft licenses require derivative works to include source code under a copyleft license. Permissive licenses do not, and therefore the code can be used within proprietary software. Copyleft can be further divided into strong and weak depending on whether they define derivative works broadly or narrowly.[10]
Licenses focus on copyright law, but code is also covered by software patents. Patent law covers ideas and differs significantly. While copyrights cover a specific implementation, patents cover any implementation of a claim. Patent claims give the holder the right to exclude others from making, using, selling, or importing products based on the idea. Because patents grant the right to exclude rather than the right to create, it is possible to have a patent on an idea but still be unable to legally implement it if the invention relies on another patented idea. Thus, open-source patent grants can offer permission only from covered patents. They cannot guarantee that a third party has not patented any concepts embodied in the code.[11] The older permissive licenses do not discuss patents directly and offer only implicit patent grants in their offers to use or sell covered material. Newer copyleft licenses and the 2004 Apache License offer explicit patent grants and limited protection from patent litigation. These patent retaliation clauses protect developers by terminating grants for any party who initiates a patent lawsuit regarding covered software.[12]
Trademarks are the only form of IP not shared by free and open-source software. Trademarks on FOSS function the same as any trademark.[13] A trademark is a design that identifies the distinct source of a product. Because they distinguish products, the same designs can be used in different fields where there is no risk of confusing similar sources. For example, this is why IBM is a trademark for International Business Machines, which supplies mainframe computing solutions, and the International Brotherhood of Magicians which supplies guidance on stage magic.[14] To give up control of a trademark would result in the loss of that trademark. Therefore no open-source license freely offers use of a trademark.[15]
Permissive licenses, also known as academic licenses, allow recipients to use, modify, and distribute software with no obligation to provide source code. Institutions created these licenses to distribute their creations to the public.[16] Permissive licenses are usually short, often less than a page of text. They impose few conditions. Most include disclaimers of warranty and obligations to credit authors. A few include explicit provisions for patents, trademarks, and other forms of intellectual property.[17]
The University of California, Berkeley created the first open-source license, the Berkeley Software Distribution (BSD) license to permit free usage with no obligations placed on users. The BSD licenses brought the concept of academic freedom of ideas to computing. Early academic software authors had shared code based on implied promises. Berkley made these concepts explicit with clear disclaimers for liability and warranty along with conditions, or clauses, for redistribution. The original had 4 clauses but subsequent versions have further reduced the restrictions. As a result, it's common to specify if software uses a 2-clause or 3-clause version.[18]
The Massachusetts Institute of Technology (MIT) created an academic license based on the BSD original. The MIT license clarified the conditions by making them more explicit. For example, the MIT license describes the right to sublicense. One of the strengths of open-source development is the complex process where developers can build on the derivative works of each other and combine their projects into collective works. Explicitly making covered code sublicensable provides a legal advantage when tracking the chain of authorship.[19] The BSD and MIT are template licenses that can be adapted to any project. They are widely adapted and used by many FOSS projects.[18]
The Apache License is more comprehensive and explicit. The Apache Software Foundation wrote it for their Apache HTTP Server. Version 2, published in 2004, offers legal advantages over simple licenses and provides similar grants.[20] While the BSD and MIT licenses offer an implicit patent grant, the Apache License includes a section on patents with an explicit grant from contributors. Additionally, it is one of the few permissive licenses with a patent retaliation clause. Patent retaliation, or patent suspension, clauses take effect if a licensee initiates patent infringement litigation on covered code. In that situation, the patent grants are revoked. These clauses protect against patent trolling.[12]
Copyleft uses reciprocity to subvert restrictions in IP law. Copyleft originates in the free software movement, science fiction fandom, and the broader counterculture. According to the 1910 Buenos Aires Convention, copyrighted literature needed a reservation of rights, or copyright notice. These were typically a line of text reading "Copyright © All rights reserved." These copyright formalities would be printed on the title page of a book or somewhere on the packaging of other media. In the Discordian satirical but sacred book, the Principia Discordia, Gregory Hill used instead a notice that read, "Ⓚ All rights reversed." The phrase "all rights reversed" entered into the computing and science fiction culture as expressions of resistance to IP law and its restrictions. It was often paired with "copyleft" and playful alternatives to the copyright symbol. In 1984, programmer Don Hopkins mailed a manual to Richard Stallman with a "Copyleft Ⓛ" sticker. Stallman was working on the GNU project at that time and adopted the term to describe his goal of reciprocity. The GNU project employed an early version of copyleft with the 1985 release of GNU Emacs.[21] The term would become associated with the FSF's later reciprocal licenses, notably the GNU General Public License (GPL). The FSF popularized the word and associated it with reciprocal free software.[22]
Traditional, proprietary software licenses are written with the goal of increasing profit, but Stallman wrote the GPL to increase the body of available free software. His reciprocal licenses offer the rights to use, modify, and distribute the work on the condition that people must release derivative works under a license offering these same freedoms. Software built on a copyleft base must come with the source code. This offers protection against proprietary software consuming code without giving back.[23] Richard Stallman stated that "the central idea of copyleft is to use copyright law, but flip it over to serve the opposite of its usual purpose: instead of a means of privatizing software, [copyright] becomes a means of keeping software free."[24]
Courts have found that distributing copyleft applications indicates acceptance of the terms.[25] Physical software releases can acquire the consumer's assent with notices placed on shrinkwrap. Online distribution can use clickwrap, a digital equivalent where the user must click to accept. Copyleft releases have an additional acceptance mechanism. Without permission from the copyright holder, the law prohibits redistribution, public displays, and the release of modified versions. Therefore engaging in these actions as allowed by an open-source license is treated as an indication of acceptance of the requirement to provide source code under the appropriate terms.[26]
Practical benefits to copyleft licenses have attracted commercial developers. Corporations have used and written reciprocal licenses with a narrower scope than the GPL. The GPL remains the most popular license of this type, but there are other significant examples. The FSF has crafted the Lesser General Public License (LGPL) for libraries. Mozilla uses the Mozilla Public License (MPL) for their releases, including Firefox. IBM drafted the Common Public License (CPL) and later adopted the Eclipse Public License (EPL). A difference between the GPL and other reciprocal licenses is how they define derivative works covered by the reciprocal provisions. The GPL, and the Affero License (AGPL) based on it, use a broad scope to describe affected works. The AGPL extends the reciprocal obligation in the GPL to cover software made available over a network.[27] They are called strong copyleft in contrast to the weaker copyleft licenses often used by corporations. Weak copyleft uses narrower, explicit definitions of derivative works.[28] The MPL uses a file-based definition, the CPL/EPL use a module-based definition, and FSF's own LGPL exempts libraries in certain situations.[29]
License compatibility determines how code with different licenses can be distributed together. The goal of open-source licensing is to make the work freely available, but this becomes complicated when working with multiple terminologies imposing different requirements.[30] There are many uncommonly used licenses and some projects write their own bespoke agreements. As a result, this causes more confusion than other legal aspects. When releasing a collection of applications, each license can be considered separately. However, when attempting to combine software, code from another project can only be in-licensed if the project uses compatible terms and conditions.[31]
When combining code bases, the original licenses can be maintained for separate components, and the larger work released under a compatible license. Permissive licenses are broadly compatible because they can cover separate parts of a project. The GPL, LGPL, AGPL, MPL, EPL, and Apache License have all been revised to enhance compatibility.[32] This compatibility is often one-way. Permissive licenses can be used within copyleft works, but copyleft material cannot be released under a permissive license. Some weak copyleft licenses can be used under the GPL and are said to be GPL-compatible. GPL software can only be used under the GPL or AGPL. Public domain content can be used anywhere as there is no copyright claim, but code acquired under any almost any set of terms cannot be waved to the public domain. [30]
Nearly all free software licenses are also open-source software licenses. The separate terms free software and open-source software reflect different values rather than a technical or legal difference. The founder of the FSF, Richard Stallman, stated that "free software is an ethical imperative" in contrast to the practical aims of open source.[33] The criteria for free and open-source licenses are both similar and related. Bruce Perens based the Open Source Definition on the Debian project's guidelines which were based on Stallman's Free Software Definition.[34]
There are occasional edge cases where either the FSF or the OSI accept a license but not both. For example, only the OSI approved the Open Watcom license. The FSF viewed their Sybase Open Watcom Public License as non-free because it required published source code for private modifications. Situations like this are rare, and the popular free software licenses are open source, including the GPL.[35]
When a copyright expires, the work enters into the public domain. At that point, no one has exclusive rights, and it is freely available to anyone.[36] Additionally, software released before copyright law applied to computer programs was released as public domain.[4] According to attorney Lawrence Rosen, copyright laws were not written with the expectation that creators would release their work into the public domain. Thus intellectual property laws lack clear paths to waive a copyright. Highly permissive licenses described as "public domain" may legally function as unilateral contracts that offer something but impose no terms.[37]
A public-domain-equivalent license, like the Creative Commons CC0, provides a simple waiver of copyright claims into the public domain. Then because there are no standard methods to waive copyrights, they provide a permissive software license as a fallback. In jurisdictions that do not accept a public domain waiver, the permissive license takes effect.[38] Public domain waivers share limitations with simple academic licenses including limited protection against patent or trademark claims. This creates the possibility that an outside party could attempt to control a public domain work via patent or trademark law.[39] Public domain waivers handle warranties differently from any license. Open-source licenses, even very permissive ones, like the MIT license, disclaim warranty and liability. Anyone using the software must accept this disclaimer as a condition. Because public domain content is freely available to anyone, a public domain waiver cannot impose a disclaimer of warranty or liability.[36]
Freeware is software distributed at no cost. FOSS is often given away gratis, but "freeware" commonly refers to proprietary software. Proprietary software does not grant permission to modify or redistribute. Proprietary freeware licenses limit redistribution, prohibit commercial usage, and limit installations.[40] Rather than an open-source model that facilitates collaborative development, proprietary freeware often comes with an end-user license agreement that excludes users from the development process. Freeware is part of the business model of major proprietary software vendors. For example, in 2014, Microsoft was the world's largest supplier of freeware.[41] Source-available software is a marketing term for proprietary freeware that comes with source code as a reference but not as the basis for derivative works.[42]



