22410,
OS360andsuccessors,
OS/360, officially known as IBM System/360 Operating System,[1][2] is a discontinued batch processing operating system developed by IBM for their then-new System/360 mainframe computer, announced in 1964; it was influenced by the earlier IBSYS/IBJOB and Input/Output Control System (IOCS) packages for the IBM 7090/7094[citation needed] and even more so by the PR155 Operating System for the IBM 1410/7010 processors.[citation needed] It was one of the earliest[NB 1] operating systems to require the computer hardware to include at least one direct access storage device.
Although OS/360 itself was discontinued, successor operating systems, including the virtual storage MVS and the 64-bit z/OS, are still run as of 2023[update] and maintain application-level compatibility with OS/360.
IBM announced three different levels of OS/360, generated from the same tapes and sharing most of their code. IBM eventually renamed these options and made some significant design changes:
Users often coined nicknames, e.g., "Big OS", "OS/MFT", but none of these names had any official recognition by IBM.
IBM provided OS/360 as a set of libraries on tape that the installation had to restore to DASD in order to perform a system generation. IBM also offered a set of optional source tapes that the installation could use to modify and assemble modules that IBM normally provided as object code. In addition, IBM offered microfiche that had assembly listing of the basic program material and of subsequent service.[NB 3] IBM continued distributing source code until it imposed an Object Code Only[3] (OCO) policy for licensed software.
The other major operating system for System/360 hardware was DOS/360.
OS/360 is in the public domain[4] and can be downloaded freely. As well as being run on actual System/360 hardware, it can be executed on the free Hercules emulator, which runs under most UNIX and Unix-like systems including Linux, Solaris, and macOS, as well as Windows. There are OS/360 turnkey CDs that provide pregenerated OS/360 21.8 systems ready to run under Hercules.
IBM originally intended that System/360 should have only one batch-oriented[NB 4] operating system, OS/360,[5] capable of running on machines as small as 32 KiB.[NB 5] It also intended to supply a separate timesharing operating system, TSS/360, for the System/360 Model 67. There are at least two accounts of why IBM eventually decided to produce other, simpler batch-oriented operating systems:
IBM introduced a series of stop-gaps to prevent System/360 hardware sales from collapsing—first Basic Programming Support (BPS) and BOS/360 (Basic Operating System, for the smallest machines with 8K byte memories), then TOS/360 (Tape Operating System, for machines with at least 16K byte memories and only tape drives), and finally DOS/360 (Disk Operating System), which became a mainstream operating system and is the ancestor of today's widely used z/VSE.[7][8]
IBM released three variants of OS/360: PCP (Primary Control Program), a stop-gap which could run only one job at a time, in 1966; MFT (Multiprogramming with Fixed number of Tasks) for the mid-range machines, and MVT (Multiprogramming with Variable number of Tasks) for the top end.[9] MFT and MVT were used until at least 1981,[10] a decade after their successors had been launched.[11] The division between MFT and MVT arose because of storage limitations and scheduling constraints. Initially IBM maintained that MFT and MVT were simply "two configurations of the OS/360 control program", although later IBM described them as "separate versions of OS/360".[2][5]
IBM originally wrote OS/360 in assembly language. Later on, IBM wrote some OS/360 code in a new language, Basic Systems Language (BSL),[12] derived from PL/I. A large amount of the TSO code in Release 20 was written in BSL.
TSS/360 was so late and unreliable that IBM canceled it, although IBM later supplied three releases of the TSS/370 PRPQ. By this time CP-67 was running well enough for IBM to offer it without warranty as a timesharing facility for a few large customers.[13]
These three options offered such similar facilities that porting applications between them usually required minimal effort; the same versions of IBM Program Products, application and utility software ran on both. The text below mostly treats PCP, MFT and MVT as simply new names for the original SSS, MSS and MPS, although there were some design changes. Also, the text does not distinguish between M65MP and MVT.
Officially, PCP, MFT and MVT are not separate operating systems from OS/360,[2] they are only install-time configuration options—in today's words, three different variants of the OS Nucleus and Scheduler.  However, because of quite different behavior and memory requirements, users commonly consider them de facto separate operating systems and refer to them as "early OS/360", "OS/MFT", "OS/MVT", respectively. MFT differs from MVT mainly in the way in which it manages memory: when installing MFT, customers specify in the system generation (SysGen) a fixed[NB 6] number of  partitions, areas of memory with fixed boundaries, in which application programs can be run simultaneously.[5]
Primary Control Program (PCP) was intended for machines with small memories. It is similar to MFT[NB 7] with one partition. Experience indicated that it was not advisable to install OS/360 on systems with less than 128 KiB of memory, although limited production use was possible on much smaller machines, such as 48 KiB of memory. IBM dropped the PCP option in the final releases of OS/360, leaving only MFT II and MVT, both of which required more memory.
Also referred to as SYS=MIN in macro expansions that were system-dependent.
Multiprogramming with a Fixed number of Tasks (MFT) was intended to serve as a stop-gap until Multiprogramming with a Variable number of Tasks (MVT), the intended target configuration of OS/360, became available in 1967. Early versions of MVT had many problems, so the simpler MFT continued to be used for many years. After introducing new System/370 machines with virtual memory in 1972, IBM developed MFT 2 into OS/VS1, the last system of this particular line.
The first version of MFT[14] shared much of the code and architecture with PCP, and was limited to four partitions. It was very cumbersome to run multiple partitions. Many installations used Houston Automatic Spooling Priority (HASP) to mitigate the complexity.
MFT Version II (MFT-II)[15] shared much more of the Control Program and Scheduler code with MVT, and was much more flexible to run. The maximum number of partitions increased to 52.
Later modifications of MFT-II added sub-tasking, so that the fixed number of tasks was no longer fixed, although the number of partitions did remain a limitation.
Experience indicated that it was not advisable to install MFT on systems with less than 256 KiB of memory,[16] which in the 1960s was quite a large amount.
Also referred to as SYS=INT in macro expansions that were system-dependent.
Multiprogramming with a Variable number of Tasks (MVT)[17] was the most sophisticated of three available configurations of OS/360's control program, and one of two available configurations in the final releases.[18] MVT was intended for the largest machines in the System/360 family.  Introduced in 1964, it did not become available until 1967. Early versions had many problems and the simpler MFT continued to be used for many years. Experience indicated that it was not advisable to install MVT on systems with less than 512 KiB of memory
MVT treated all memory not used by the operating system as a single pool from which contiguous regions could be allocated as required by an unlimited[NB 8] number of simultaneous application and systems programs.  This scheme was more flexible than MFT's and in principle used memory more efficiently, but was liable to fragmentation - after a while one could find that, although there was enough spare memory in total to run a program, it was divided into separate chunks none of which was large enough.[5]  System/360 lacked memory relocation hardware so memory compaction could not be used to reduce fragmentation.  A facility called Rollout/Rollin could swap a running job out to secondary storage to make its memory available to another job.  The rolled-out job would, however, have to be rolled-in to the original memory locations when they again became available.[19]
In 1971 the Time Sharing Option (TSO) for use with MVT was added as part of release 20.1.  TSO became widely used for program development because it provided an editor,  the ability to submit batch jobs, be notified of their completion, and view the results without waiting for printed reports, and debuggers for some of the programming languages used on System/360. TSO in OS/360[NB 9] communicated with terminals by using Telecommunications Access Method (TCAM).  TCAM's name suggests that IBM hoped it would become the standard access method for data communications, but in fact TCAM in OS/VS2 was used almost entirely for TSO and was largely superseded by Virtual Telecommunications Access Method (VTAM) in the mid-to-late 1970s.
Also referred to as SYS=VMS in invocations of some macros that were system-dependent.
Model 65 Multiprocessing (M65MP) is a variant of MVT. It runs on a 360/65 in Multisystem mode[20] M65MP traps use of the Set System Mask (SSM) instruction to serialize disabled code between the two CPUs. For the most part an M65MP system has the same behavior and interfaces as any other MVT system.
The keyword parameter SYS=VMS included M65MP as well as uniprocessor MVT.
PCP, MFT and MVT provide similar facilities from the point of view of application programs:
Some features were available only for MFT and MVT:
When System/370 was announced in 1970 it offered essentially the same facilities as System/360 but with about 4 times the processor speeds of similarly priced System/360 CPUs.[21] Then in 1972 IBM announced System/370 Advanced Functions, of which the main item was that future sales of System/370 would include virtual memory capability and this could also be retro-fitted to existing System/370 CPUs. Hence IBM also committed to delivering enhanced operating systems which could support the use of virtual memory.[22][23]
IBM provided an OS/360 SYSGEN option for S/370 support, which did not support DAT but did:
OS/VS1 is the successor to MFT, and offers similar facilities with several additions, e.g., RES, virtual memory. VSAM (see below) was initially available as an independent component release (ICR) and later integrated into the OS/VS1 base.[5] IBM released fairly minor enhancements of OS/VS1 until 1983, and in 1984 announced that there would be no more. AIX/370, AIX/ESA, DPPX, IX/370,  OS/VS1 and TSS/370 are the only System/370 operating systems that do not have modern descendants.
OS/VS2 release 1 was just MVT plus virtual memory and VSAM (see below).[5]  This version was eventually renamed OS/VS2 SVS, for Single Virtual Storage, when OS/VS2 Release 2, also known as MVS, for Multiple Virtual Storage, was introduced.  SVS was intended as a stepping stone from MVT to MVS, and is only of historical interest today.
In 1974 IBM released what it described as OS/VS2 Release 2 but which was really a new operating system that was upwards-compatible with OS/VS2 Release 1. The Supervisor of the new system had been largely rewritten in a new dialect of BSL, PL/S;[24][25] BSL and PL/S were dialects of PL/I with extensions designed to transcribe Assembly language code, including privileged instructions needed to control the computer as a whole. Time-sensitive OS components, such as the OS Dispatcher and the IOS, notably, among many others, remained coded in Assembly Language, which had been enhanced for OS/VS in the IFOX00 Assembler[NB 12] (from the older, OS/360 IEUASM Assembler).
The new version's most noticeable feature was that it supported multiple virtual address spaces - different applications thought they were using the same range of virtual addresses, but the new system's virtual memory facilities mapped these to different ranges of real memory addresses. Each application's address space consists of 3 areas: operating system (one instance shared by all jobs); an application area which was unique for each application; shared virtual area used for various purposes including inter-job communication. IBM promised that the application areas would always be at least 8MB. This approach eliminated the risk of memory fragmentation that was present in MVT and SVS, and improved the system's internal security.[5] The new system rapidly became known as "MVS" (Multiple Virtual Storages), the original OS/VS2 became known as "SVS" (Single Virtual Storage) and IBM itself accepted this terminology and labelled MVS's successors "MVS/xxx".[26]
MVS introduced a new approach to workload management, allowing users to define performance targets for high-priority batch jobs. This enabled users to give their systems more work than before without affecting the performance of the highest-priority jobs.[27]
MVS was IBM's first mainstream operating system on the System/370[NB 13] to support what IBM called tightly coupled multiprocessing, in which 2 (later, up to 12, for IBM mainframes, and up to 16, for Amdahl mainframes) CPUs shared concurrent access to the same memory (and a single copy of the operating system and peripheral devices), providing greater processing power and a degree of graceful degradation if one CPU failed (which, fortunately, became an increasingly rare event, as system up time rose from hours to days and, then, to years.)
Initially MVS was supplied with a job queue manager called JES2 (Job Entry Subsystem 2), which was descended from HASP (Houston Automatic Spooling Priority) and also supported Remote Job Entry from workstations located elsewhere. JES2 can only manage jobs for one CPU (which might be a tightly coupled multiprocessor system). In 1976 IBM provided another option, JES3 (Job Entry Subsystem 3), a descendant of ASP (Attached Support Processor), which allows one CPU to manage a single job queue feeding work to several physically distinct CPUs, and therefore allows one operator's console to manage the work of all those CPUs.[28] Note: JES1 was the job queue manager for OS/VS1 (see above).
IBM hoped that Virtual storage access method (VSAM) would replace its earlier sequential, indexed and direct access methods as it provided improved versions of these:[29][30]
These VSAM formats became the basis of IBM's database management systems, IMS/VS and DB2 - usually ESDS for the actual data storage and KSDS for indexes.
VSAM also provides a new implementation of the catalog facility which enables applications to access files by name, without needing to know which disk drive(s) they are on. VSAM datasets must be defined in a VSAM catalog before they are used, and non-VSAM datasets can also be listed in a VSAM catalog. The MVS Master Catalog must be a VSAM catalog.[30]  Catalogs were originally provided in OS/360 in the form of CVOLs; MVS added a separate catalog structure for VSAM; later IBM added a third type of catalog known as an ICF catalog.[32] (IBM removed support for CVOL and VSAM catalogs as of 2000, since they were not Y2K-compliant; hence in z/OS, only ICF catalogs are supported.)[33]
In 1974 IBM announced Systems Network Architecture, which was meant to reduce the cost of running large networks of terminals, mainly by using communications lines much more efficiently. This is only available for IBM's virtual memory operating systems, since its mainframe software component, VTAM is only available with these operating systems.
In 1977 IBM announced MVS/System Extensions, a program product (i.e., it cost extra money) which improved MVS performance and added functionality.[34]
Descendants of MVS are still used on the latest descendants of System/360, System/390 and zSeries; it was renamed to OS/390 for System/390, and the 64-bit version for the zSeries was named z/OS.
For reasons of size, this section concentrates on the MVT option of OS/360; PCP and MFT are very similar; with changes in nomenclature and some minor differences. OS/VS1 and SVS Have much the same structure as MFT II and MVT, while MVS, although retaining much of the logic of MVT, has major enhancements better addressed in a separate article. This article adheres to IBM's usage of the term storage rather than memory.
OS/360 assigns processors to tasks, which are analogous to light-weight processes or threads in other systems. Each task has a Task Control Block (TCB) and a stack of Request Blocks[NB 14] (RBs). A task is either dispatchable or nondispatchable[NB 15] and an RB is either waiting[NB 16] or not waiting. The Dispatcher selects the highest priority dispatchable task whose current RB is not waiting.
MVS assigns processors to address spaces, which are analogous to processes, and to Service Request Block (SRBs) and tasks within address spaces. Each address space has an Address Space Control Block (ASCB), a queue of SRBs and a queue of TCBs.
In OS/360 all storage is visible to all code, although fetch protection may prevent access by unprivileged code to some control blocks or between jobs.
Main storage for MVT is divided into a system (fixed) area at the bottom of real storage, a common area at the top and a private area in the middle. These contain the following areas.
'This is a section of storage at the highest physical address. It contains
SVS is similar except that the system area is at the top and bottom of virtual storage rather than real storage, the Nucleus is in Virtual=Real (V=R) storage, the private area contains a Local System Queue Area (LSQA) for each region and the LPA is split into: 
In MVS all address spaces share the system area[NB 18] but not the private area. MVS adds:
In MVS/XA and later, there are system, private and common areas below the 16 MiB (224 bytes) line, and extended areas between 16 MiB and 2 GiB (231 bytes).
In z/OS, the storage layout[36] is similar to that of MVS/XA, MVS/ESA and OS/390; storage above the 2 GiB bar is managed by different services than storage below the bar.
When the operators initially selects LOAD, The system sends a READ IPL command to the selected device, reading 24 bytes from cylinder 0, track 0, record 1, into storage location 0.[35]: 22  Bytes 8-23 read and transfer to the bootstrap record[37] cylinder 0, track 0, record 2, which in turn reads and transfers to the IPL Loader. The IPL Loader does initial housekeeping, locates the requested nucleus and loads it with relocation; the interrupt handler csect is always at location 0 and the Nucleus Initialization csect is always last, so that it can eventually be discarded. The Nucleus Initialization Program (NIP) initializes various system components.
Initially NIP must provide services that it needs. However, as it initializes various OS facilities it begins using standard services, e.g., it uses the OBTAIN macro to read a Data Set Control Block (DSCB) from a Volume Table of Contents (VTOC).
NIP reads members from the SYS1.PARMLIB dataset to obtain various operational data. These members may be specified by default, by the operator, or by parameters in other members.
NIP eventually creates a Master Schedule region from the private area and transfers to IEEVIPL to initialize the Master Scheduler and Communication Task, which completes system Initialization.
In addition to batch jobs, OS/360 supports several categories of work that it handles similarly to batch jobs. In all cases the system has to process JCL, allocate a region, allocate devices and initiate the job-step program. For a batch job, the Reader/Interpreter processes JCL from an external device; for START commands,  MOUNT commands  and TSO LOGON, the system generates JCL invoking a cataloged procedure.
OS/360 has a control block known as the Communications Vector Table (CVT), which contains pointers to other control blocks and to various routines. Some of the OS/360 macro-instructions refer to fields in the CVT and other control blocks.
OS/360 has macros to provide dsect mappings of some control blocks, although many macros have hard coded offsets rather than the names in the mapping macros.
OS/360 services typically have parameters in register 1; some use registers 0 and 1 and some use registers 0, 1 and 15.
OS/360 service macros often have three forms:
Many of the important services are implemented in SVC routines, and preserve registers 2-14. Others are implemented as directly callable subroutines, with entry addresses in system control blocks and require that Register 13 point to a standard save area; these typically preserve registers 2-13. In either case, register 15 at exit normally contains a return code; many services return additional data in registers 0 and 1.
OS/360 requires at least one operator console; there are two levels of support
Each message issued by a Write To Operator (WTO) or Write To Operator with Reply (WTOR) has associated with it one or more routing codes. The operator can limit a console to displaying only specific routing codes. A typical use for this would be placing a console in a tape library and displaying only messages relevant to the tape librarian on it. The special routing code 7 causes the message text to be included in the job's message log.
Each message also has a descriptor that controls how it is processed.
One of the key operator commands is REPLY, which provides a response to the WTOR macro. The operator can only reply to a WTOR at a console that received its message text.
A key command for display consoles, e.g., 2250, 2260, 3270, is CONTROL (K), which sets processing options for, e.g., scrolling.
These data are taken from IBM 360 Operating Systems Release History, System/370 Market Chronology of Products & Services,
IBM. "z/OS, z/OS.e, and OS/390 marketing and service announce, availability, and withdrawal dates". and IBM announcement letters.



Information box
{'Developer': 'IBM', 'Written in': 'Assembly language, Basic Systems Language (BSL)', 'OS family': 'OS/360 and successors', 'Initial release': 'March 31, 1966; 57 years ago', 'Latest release': '21.8 / August 1972; 50 years ago', 'Marketing target': 'IBM mainframe computers', 'Platforms': 'S/360, S/370', 'Kernel type': 'N/A', 'License': 'Public domain', 'Succeeded by': 'OS/VS1, OS/VS2 (SVS)'}