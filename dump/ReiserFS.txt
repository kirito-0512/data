39183,
ReiserFS,
ReiserFS is a general-purpose, journaling file system initially designed and implemented by a team at Namesys led by Hans Reiser and licensed under GPLv2.  Introduced in version 2.4.1 of the Linux kernel, it was the first journaling file system to be included in the standard kernel. ReiserFS was the default file system in Novell's SUSE Linux Enterprise until Novell decided to move to ext3 on October 12, 2006, for future releases.[3]
Namesys considered ReiserFS version 3.6 which introduced a new on-disk format allowing bigger filesizes, now occasionally referred to as Reiser3, as stable and feature-complete and, with the exception of security updates and critical bug fixes, ceased development on it to concentrate on its successor, Reiser4. Namesys went out of business in 2008 after Reiser's conviction for murder. The product is now maintained as open source by volunteers.[4] The reiserfsprogs 3.6.27 were released on 25 July 2017.[5]
ReiserFS is currently supported on Linux without quota support. It has been discussed for removal from the Linux kernel since early 2022 due to a lack of maintenance upstream, and technical issues inherent to the filesystem, such as the fact it suffers from the year 2038 problem;[6][7][8] it was deprecated in Linux 5.18,[9] with removal planned for 2025.[10][11]
At the time of its introduction, ReiserFS offered features that had not been available in existing Linux file systems. One example is tail packing—a scheme to reduce internal fragmentation at cost of performance. Reiser4 may have improved this by packing tails where it does not negatively affect performance.[12]
ReiserFS stores file metadata ("stat items"), directory entries ("directory items"), inode block lists ("indirect items"), and tails of files ("direct items") in a single, combined B+ tree keyed by a universal object ID. Disk blocks allocated to nodes of the tree are "formatted internal blocks".  Blocks for leaf nodes (in which items are packed end-to-end) are "formatted leaf blocks".  All other blocks are "unformatted blocks" containing file contents.  Directory items with too many entries or indirect items which are too long to fit into a node spill over into the right leaf neighbour. Block allocation is tracked by free space bitmaps in fixed locations.
By contrast, ext2 and other Berkeley FFS-like file systems of that time simply used a fixed formula for computing inode locations, hence limiting the number of files they may contain.[13] Most such file systems also store directories as simple lists of entries, which makes directory lookups and updates linear time operations and degrades performance on very large directories. The single B+ tree design in ReiserFS avoids both of these problems due to better scalability properties.
Compared with ext2 and ext3 in version 2.4 of the Linux kernel, when dealing with files under 4 KiB and with tail packing enabled, ReiserFS may be faster.[14]
Before Linux 2.6.33,[15] ReiserFS heavily used the big kernel lock (BKL)—a global kernel-wide lock—which does not scale well for systems with multiple cores,[16] as the critical code parts are only ever executed by one core at a time.
ReiserFS was the default file system in SuSE Linux since version 6.4 (released in 2000),[17][18] until switching to ext3 in SUSE Linux Enterprise 10.2 and openSUSE 11, announced in 2006.[19][20]
Jeff Mahoney of SUSE wrote a post on 14 September 2006 proposing to move from ReiserFS to ext3 for the default installation file system.[16] Some reasons he mentioned were scalability, "performance problems with extended attributes and ACLs", "a small and shrinking development community", and that "Reiser4 is not an incremental update and requires a reformat, which is unreasonable for most people."[16] On October 4 he wrote a response comment on a blog in order to clear up some issues.[21] He wrote that his proposal for the switch was unrelated to Hans Reiser being under trial for murder.[22][failed verification] Mahoney wrote he "was concerned that people would make a connection where none existed" and that "the timing is entirely coincidental and the motivation is unrelated."[21]
Some directory operations (including unlink(2)) are not synchronous on ReiserFS, which can result in data corruption with applications relying heavily on file-based locks (such as mail transfer agents qmail[23] and Postfix[24])  if the machine halts before it has synchronized the disk.[25]
There are no programs to specifically defragment a ReiserFS file system, although tools have been written to automatically copy the contents of fragmented files hoping that more contiguous blocks of free space can be found. However, a "repacker" tool was planned for the next Reiser4 file system to deal with file fragmentation.[26] Fragmentation is still an issue with SSD regardless of file system.[27]
ReiserFS 3's fsck is capable to rebuild the whole tree as part of the rescue in case of its total corruption. This action has to be explicitly initiated by administrator and is not part of normal operation. Predictably, the process is destructive and may further corrupt existing files or introduce new entries with unexpected contents, which has been criticized as less than optimal method.[28]
ReiserFS v3 images should not be stored on a ReiserFS v3 partition (e.g. backups or disk images for emulators) without transforming them (e.g., by compressing or encrypting) in order to avoid confusing the rebuild. Reformatting an existing ReiserFS v3 partition can also leave behind data that could confuse the rebuild operation and make files from the old system reappear. This also allows malicious users to intentionally store files that will confuse the rebuilder. As the metadata is always in a consistent state after a file system check, corruption here means that contents of files are merged in unexpected ways with the contained file system's metadata. This is similar to the FSID problem in btrfs. The ReiserFS successor, Reiser4, fixes this problem.
ReiserFS in versions of the Linux kernel before 2.4.16 were considered unstable by Namesys and not recommended for production use, especially in conjunction with NFS.[29]
Early implementations of ReiserFS (prior to that in Linux 2.6.2) were also susceptible to out-of-order write hazards. But the current journaling implementation in ReiserFS is now on par with that of ext3's "ordered" journaling level.[citation needed]



Information box
{'Developer(s)': 'Namesys', 'Full name': 'ReiserFS', 'Introduced': '2001; 22 years ago with Linux 2.4.1', 'Partition IDs': 'Apple_UNIX_SVR2 (Apple Partition Map)\n0x83 (MBR)\nEBD0A0A2-B9E5-4433-87C0-68B6B72699C7 (GPT)', 'Directory contents': 'B+ tree', 'File allocation': 'Bitmap[1]', 'Max volume size': '16 TiB[2]', 'Max file size': '1 EiB (8 TiB on 32 bit systems)[2]', 'Max no. of files': '232−3 (~4 billion)[2]', 'Max filename length': '4032 bytes, limited to 255 by Linux VFS', 'Allowed filename\ncharacters': "All bytes except NUL and '/'", 'Dates recorded': 'Modification (mtime), metadata change (ctime), access (atime)', 'Date range': 'December 14, 1901 – January 18, 2038 (32-bit Unix time)', 'Date resolution': '1 s', 'Forks': 'Extended attributes', 'File system\npermissions': 'Unix permissions, ACLs and arbitrary security attributes', 'Transparent\ncompression': 'No', 'Transparent\nencryption': 'No', 'Supported\noperating systems': 'Linux, ReactOS'}