37829,
Conjunctivenormalform,
In Boolean logic, a formula is in conjunctive normal form (CNF) or clausal normal form if it is a conjunction of one or more clauses, where a clause is a disjunction of literals; otherwise put, it is a product of sums or an AND of ORs. As a canonical normal form, it is useful in automated theorem proving and circuit theory.
All conjunctions of literals and all disjunctions of literals are in CNF, as they can be seen as conjunctions of one-literal clauses and conjunctions of a single clause, respectively. As in the disjunctive normal form (DNF), the only propositional connectives a formula in CNF can contain are and, or, and not. The not operator can only be used as part of a literal, which means that it can only precede a propositional variable or a predicate symbol.
In automated theorem proving, the notion "clausal normal form" is often used in a narrower sense, meaning a particular representation of a CNF formula as a set of sets of literals.
All of the following formulas in the variables 
A
,
B
,
C
,
D
,
E
{\displaystyle A,B,C,D,E}
, and 
F
{\displaystyle F}
 are in conjunctive normal form:
For clarity, the disjunctive clauses are written inside parentheses above. In disjunctive normal form with parenthesized conjunctive clauses, the last case is the same, but the next to last is 
(
A
)
∨
(
B
)
{\displaystyle (A)\lor (B)}
. The constants true and false are denoted by the empty conjunct and one clause consisting of the empty disjunct, but are normally written explicitly.[1]
The following formulas are not in conjunctive normal form:
Every formula can be equivalently written as a formula in conjunctive normal form. The three non-examples in CNF are:
[2]Every propositional formula can be converted into an equivalent formula that is in CNF. This transformation is based on rules about logical equivalences: double negation elimination, De Morgan's laws, and the distributive law.
Since all propositional formulas can be converted into an equivalent formula in conjunctive normal form, proofs are often based on the assumption that all formulae are CNF. However, in some cases this conversion to CNF can lead to an exponential explosion of the formula. For example, translating the following non-CNF formula into CNF produces a formula with 
2
n
{\displaystyle 2^{n}}
 clauses:
In particular, the generated formula is:
This formula contains 
2
n
{\displaystyle 2^{n}}
 clauses; each clause contains either 
X
i
{\displaystyle X_{i}}
 or 
Y
i
{\displaystyle Y_{i}}
 for each 
i
{\displaystyle i}
.
There exist transformations into CNF that avoid an exponential increase in size by preserving satisfiability rather than equivalence.[3][4] These transformations are guaranteed to only linearly increase the size of the formula, but introduce new variables. For example, the above formula can be transformed into CNF by adding variables 
Z
1
,
…
,
Z
n
{\displaystyle Z_{1},\ldots ,Z_{n}}
 as follows:
An interpretation satisfies this formula only if at least one of the new variables is true. If this variable is 
Z
i
{\displaystyle Z_{i}}
, then both 
X
i
{\displaystyle X_{i}}
 and 
Y
i
{\displaystyle Y_{i}}
 are true as well. This means that every model that satisfies this formula also satisfies the original one. On the other hand, only some of the models of the original formula satisfy this one: since the 
Z
i
{\displaystyle Z_{i}}
 are not mentioned in the original formula, their values are irrelevant to satisfaction of it, which is not the case in the last formula. This means that the original formula and the result of the translation are equisatisfiable but not equivalent.
An alternative translation, the Tseitin transformation, includes also the clauses 
Z
i
∨
¬
X
i
∨
¬
Y
i
{\displaystyle Z_{i}\vee \neg X_{i}\vee \neg Y_{i}}
. With these clauses, the formula implies 
Z
i
≡
X
i
∧
Y
i
{\displaystyle Z_{i}\equiv X_{i}\wedge Y_{i}}
; this formula is often regarded to "define" 
Z
i
{\displaystyle Z_{i}}
 to be a name for 
X
i
∧
Y
i
{\displaystyle X_{i}\wedge Y_{i}}
.
In first order logic, conjunctive normal form can be taken further to yield the clausal normal form of a logical formula, which can be then used to perform first-order resolution.
In resolution-based automated theorem-proving, a CNF formula 
See below for an example.
An important set of problems in computational complexity involves finding assignments to the variables of a boolean formula expressed in conjunctive normal form, such that the formula is true. The k-SAT problem is the problem of finding a satisfying assignment to a boolean formula expressed in CNF in which each disjunction contains at most k variables. 3-SAT is NP-complete (like any other k-SAT problem with k>2) while 2-SAT is known to have solutions in polynomial time. As a consequence,[5] the task of converting a formula into a DNF, preserving satisfiability, is NP-hard; dually, converting into CNF, preserving validity, is also NP-hard; hence equivalence-preserving conversion into DNF or CNF is again NP-hard.
Typical problems in this case involve formulas in "3CNF": conjunctive normal form with no more than three variables per conjunct. Examples of such formulas encountered in practice can be very large, for example with 100,000 variables and 1,000,000 conjuncts.
A formula in CNF can be converted into an equisatisfiable formula in "kCNF" (for k≥3) by replacing each conjunct with more than k variables 
X
1
∨
⋯
∨
X
k
∨
⋯
∨
X
n
{\displaystyle X_{1}\vee \cdots \vee X_{k}\vee \cdots \vee X_{n}}
 by two conjuncts 
X
1
∨
⋯
∨
X
k
−
1
∨
Z
{\displaystyle X_{1}\vee \cdots \vee X_{k-1}\vee Z}
 and 
¬
Z
∨
X
k
⋯
∨
X
n
{\displaystyle \neg Z\vee X_{k}\cdots \vee X_{n}}
 with Z a new variable, and repeating as often as necessary.
To convert first-order logic to CNF:[2]
As an example, the formula saying "Anyone who loves all animals, is in turn loved by someone" is converted into CNF (and subsequently into clause form in the last line) as follows (highlighting replacement rule redexes in 
red
{\displaystyle {\color {red}{\text{red}}}}
):
Informally, the Skolem function 
g
(
x
)
{\displaystyle g(x)}
 can be thought of as yielding the person by whom 
x
{\displaystyle x}
 is loved, while 
f
(
x
)
{\displaystyle f(x)}
 yields the animal (if any) that 
x
{\displaystyle x}
 doesn't love. The 3rd last line from below then reads as "
x
{\displaystyle x}
 doesn't love the animal 
f
(
x
)
{\displaystyle f(x)}
, or else 
x
{\displaystyle x}
 is loved by 
g
(
x
)
{\displaystyle g(x)}
".
The 2nd last line from above, 
(
A
n
i
m
a
l
(
f
(
x
)
)
∨
L
o
v
e
s
(
g
(
x
)
,
x
)
)
∧
(
¬
L
o
v
e
s
(
x
,
f
(
x
)
)
∨
L
o
v
e
s
(
g
(
x
)
,
x
)
)
{\displaystyle (\mathrm {Animal} (f(x))\lor \mathrm {Loves} (g(x),x))\land (\lnot \mathrm {Loves} (x,f(x))\lor \mathrm {Loves} (g(x),x))}
, is the CNF.
