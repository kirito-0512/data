20178,
MOO,
A MOO ("MUD, object-oriented"[1][2]) is a text-based online virtual reality system to which multiple users (players) are connected at the same time.
The term MOO is used in two distinct, but related, senses. One is to refer to those programs descended from the original MOO server, and the other is to refer to any MUD that uses object-oriented techniques to organize its database of objects, particularly if it does so in a similar fashion to the original MOO or its derivatives.  Most of this article refers to the original MOO and its direct descendants, but see non-descendant MOOs for a list of MOO-like systems.
The original MOO server was authored by Stephen White, based on his experience from creating the programmable TinyMUCK system.[3][2]  There was additional later development and maintenance from LambdaMOO founder, and former Xerox PARC employee, Pavel Curtis.
One of the most distinguishing features of a MOO is that its users can perform object-oriented programming within the server, ultimately expanding and changing how it behaves to everyone.[4]  Examples of such changes include authoring new rooms and objects, creating new generic objects for others to use, and changing the way the MOO interface operates. The programming language used for extension is the MOO programming language, and many MOOs feature convenient libraries of verbs that can be used by programmers in their coding known as Utilities. The MOO programming language is a domain-specific language.[citation needed]
MOOs are network accessible, multi-user, programmable, interactive systems well-suited to the construction of text-based adventure games, conferencing systems, and other collaborative software. Their most common use, however, is as multi-participant, low-bandwidth virtual realities. They have been used in academic environments for distance education, collaboration (such as Diversity University), group decision systems,[5] and teaching object-oriented concepts;[6] but others are primarily social in nature, or used for role-playing video games, or simply to take advantage of the programming possibilities.  They have also been used in scientific studies of virtual presence.[7][8][9]
Most commonly, MOOs are connected to by users using a client which speaks the telnet protocol, which provides a stay-alive connection with the host, to relay output and send commands. Some however have developed web interfaces, or other such methods; however this commonly limits interaction that the user can have, usually to the point they have no interaction, but instead can browse objects and discover typical information. Developments in cross-MOO networking have also led to the creation of SunNET, a hubless network allowing cross-MOO communication and add extra possibilities to cross-MOO development, including networked channels.  Another network called GNA-NET, designed by Gustavo Glusman of BioMOO connected seventeen mostly education sites.  Most of these MOOs hosted online classes or other early versions of distance education.[10][11]
Every MOO stores the content and state of all its objects within a persistent object database, which keeps objects from being lost by a reset of the MOO server software or the computer hosting it.
New MOOs have to choose a starting database from which to set their MOO up, or they can use a minimal one which contains only the necessary objects to start a MOO. There are a handful of such MOO "core" databases which serve as foundations of code and utilities from which to start your MOO, including LambdaCore (from LambdaMOO), MinimalDB (considered the minimum necessary code and utilities to work usefully in a MOO), JHCore (from Jay's House Moo), and enCore
(from LinguaMOO).
Every object in the MOO is assigned a number, and may be referred to by this number, prefixed with a #, as well as its name when the user is in the object's presence. Administrators, also known as wizards, who can manage the MOO, and assign certain global names to these objects, which are prefixed with $, a process known as corifying. They also feature parenting systems, and every object will have a parent, commonly eventually leading to Root Class, otherwise known as #1. #0 is also reserved as a special system object which is responsible for managing the list of global names, incoming network connections, and other information related to the operation of the system.
MOO, along with all of its nephews, started out with text based adventure games. With the advent of the internet, MUD was formed as a networked version of one of those games. Eventually it developed into a tree of different types of MUD, with MOO becoming one of them.
Stephen White (also known by the handles "Ghondahrl" and "ghond") wrote the first version of the MOO server, which was released on May 2, 1990, and used for the operation of a server called "AlphaMOO".  Pavel Curtis, an employee of Xerox PARC and also known by his handles "Lambda", and "Haakon", took the basic design, language, and code, fixed bugs and added features to release the second version, called "LambdaMOO" on October 30, 1990.
According to Jill Serpentelli in her paper Conversational Structure and Personality Correlates of Electronic Communication:
MOO was originally developed as a MUD server in the same general style (sharing much of the command syntax and community conventions) as TinyMUD.
There are currently[when?] two distributions of the MOO server code. The more popular of the two, the LambdaMOO server, is named such as indication of the close historical and continuing association of the MOO server code with the first public MOO, LambdaMOO.
The LambdaMOO version of MOO that gained popularity in the early 1990s, and it remains[as of?] the most widely used MOO distribution. Pavel Curtis continued to maintain the server for several years. Other early contributors to the LambdaMOO server included users Tim Allen ("Gemba"), "Gary_Severn", Roger Crew ("Rog"), Judy Anderson ("yduJ"), and Erik Ostrom (known as "Joe Feedback"). Later, Erik Ostrom maintained the server, and the server is now maintained by Ben Jackson and Jay Carlson and has a LambdaMOO SourceForge.net project.
Behavior on social MOOs and role-playing MOOs has been shown to differ. For example, an early study looked at whether users engaged in gender-switching (that is, adopting a different gender online). The majority of participants (60 percent) in social MOOs had never engaged in gender-switching, while the majority (56.7 percent) in role-playing MOOs had done so. However, most of those engaged in gender-switching did so on average only 10 percent of the time. The study also found that the primary barrier to gender-switching was the belief that it is dishonest and manipulative.[13]
Some servers use "MOO" style object-oriented characteristics without being descended from the original MOO server, in the sense that they use little or none of that server's source code and use internal languages that are more or less incompatible with the MOO programming language. None of them have attained the popularity of LambdaMOO or its relatives.[citation needed]
Stephen White went on to write a new and similar system called CoolMUD, although it never obtained the same wide userbase as MOO. Another, later, attempt at a programmable object-oriented MUD server was ColdMUD, written by Greg Hudson and later maintained by Brandon Gillespie under the name "Genesis".[14]
One unusual MOO with no real relationship to the original MOO is called mooix.  mooix is unique among MUDs in that it uses the underlying UNIX operating system to handle all of the multitasking and networking issues.  Several unique side effects result from this, one of which is that the MOO can be programmed in any language.  mooix was written after a failed attempt by Joey Hess to write a MOO entirely in Perl, called perlmoo.[15]
Participants (usually referred to as users) connect to a MOO using telnet or some other, more specialized, client program. Upon connection, they are usually presented with a welcome message explaining how to either create a new character or connect to an existing one.
Almost every command is parsed by the server into a call on a MOO procedure, or verb, which actually does the work. Thus, programming in the MOO programming language is a central part of making non-trivial extensions to the database and hence the virtual reality.[citation needed]
All MOOs provide a flag called Wizard; when set on a player, the player gains the ability to view and modify nearly everything in the MOOs database. Such players are called Wizards, and usually form the basis for MOO administration. Designated owners of a MOO are sometimes referred to as Archwizards.
These wizards can restrict access to the MOO, as well as make news postings and monitor logs. Wizard permissions are needed for modification and even execution of verbs and properties for which the user does not own, or is not publicly readable/writable. All verbs and properties within objects have the appropriate flags, with the user can change to determine its current state. They can also assign global names to any object.
Builders are players who are given the limited ability to create objects and areas in a MOO, whereas programmers can also program on the MOO.


