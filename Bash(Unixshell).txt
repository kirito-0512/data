4547,
Bash(Unixshell),
Bash is a Unix shell and command language written by Brian Fox for the GNU Project as a free software replacement for the Bourne shell.[12][13] First released in 1989,[14] it has been used as the default login shell for most Linux distributions.[15] Bash was one of the first programs Linus Torvalds ported to Linux, alongside GCC.[16] A version is also available for Windows 10 and Windows 11 via the Windows Subsystem for Linux.[17][18] It is also the default user shell in Solaris 11.[19] Bash was also the default shell in versions of Apple macOS from 10.3 (originally, the default shell was tcsh)  to 10.15 (macOS Catalina), which changed the default shell to zsh, although Bash remains available as an alternative shell.[20]
Bash is a command processor that typically runs in a text window where the user types commands that cause actions. Bash can also read and execute commands from a file, called a shell script. Like most Unix shells, it supports filename globbing (wildcard matching), piping, here documents, command substitution, variables, and control structures for condition-testing and iteration. The keywords, syntax, dynamically scoped variables and other basic features of the language are all copied from sh. Other features, e.g., history, are copied from csh and ksh. Bash is a POSIX-compliant shell, but with a number of extensions.
The shell's name is an acronym for Bourne Again Shell, a pun on the name of the Bourne shell that it replaces[21] and the notion of being "born again".[22][23]
A security hole in Bash dating from version 1.03 (August 1989),[24] dubbed Shellshock, was discovered in early September 2014 and quickly led to a range of attacks across the Internet.[25][26][27] Patches to fix the bugs were made available soon after the bugs were identified.
Brian Fox began coding Bash on January 10, 1988,[28] after Richard Stallman became dissatisfied with the lack of progress being made by a prior developer.[12] Stallman and the Free Software Foundation (FSF) considered a free shell that could run existing shell scripts so strategic to a completely free system built from BSD and GNU code that this was one of the few projects they funded themselves, with Fox undertaking the work as an employee of FSF.[12][29] Fox released Bash as a beta, version .99, on June 8, 1989,[14] and remained the primary maintainer until sometime between mid-1992[30] and mid-1994,[31] when he was laid off from FSF[32] and his responsibility was transitioned to another early contributor, Chet Ramey.[33][34][35]
Since then, Bash has become by far the most popular shell among users of Linux, becoming the default interactive shell on that operating system's various distributions[36][37] (although Almquist shell may be the default scripting shell) and on Apple's macOS releases before Catalina in October 2019.[38][39][15] Bash has also been ported to Microsoft Windows and distributed with Cygwin and MinGW, to DOS by the DJGPP project, to Novell NetWare, to OpenVMS by the GNV project,[40] to ArcaOS,[41] and to Android via various terminal emulation applications.
In September 2014, Stéphane Chazelas, a Unix/Linux specialist,[42] discovered a security bug in the program. The bug, first disclosed on September 24, was named Shellshock and assigned the numbers CVE-2014-6271, CVE-2014-6277 and CVE-2014-7169. The bug was regarded as severe, since CGI scripts using Bash could be vulnerable, enabling arbitrary code execution. The bug was related to how Bash passes function definitions to subshells through environment variables.[43]
The Bash command syntax is a superset of the Bourne shell command syntax. Bash supports brace expansion, command line completion (Programmable Completion),[44] basic debugging[45] and signal handling (using trap) since bash 2.05a[46] among other features. Bash can execute the vast majority of Bourne shell scripts without modification, with the exception of Bourne shell scripts stumbling into fringe syntax behavior interpreted differently in Bash or attempting to run a system command matching a newer Bash builtin, etc. Bash command syntax includes ideas drawn from the KornShell (ksh) and the C shell (csh) such as command line editing, command history (history command),[47] the directory stack, the $RANDOM and $PPID variables, and POSIX command substitution syntax $(…).
When a user presses the tab key within an interactive command-shell, Bash automatically uses command line completion, since beta version 2.04,[48] to match partly typed program names, filenames and variable names. The Bash command-line completion system is very flexible and customizable, and is often packaged with functions that complete arguments and filenames for specific programs and tasks.
Bash's syntax has many extensions lacking in the Bourne shell. Bash can perform integer calculations ("arithmetic evaluation") without spawning external processes. It uses the ((…)) command and the $((…)) variable syntax for this purpose. Its syntax simplifies I/O redirection. For example, it can redirect standard output (stdout) and standard error (stderr) at the same time using the &> operator. This is simpler to type than the Bourne shell equivalent 'command > file 2>&1'. Bash supports process substitution using the <(command) and >(command)syntax, which substitutes the output of (or input to) a command where a filename is normally used. (This is implemented through /proc/fd/ unnamed pipes on systems that support that, or via temporary named pipes where necessary).
When using the 'function' keyword, Bash function declarations are not compatible with Bourne/Korn/POSIX scripts (the KornShell has the same problem when using 'function'), but Bash accepts the same function declaration syntax as the Bourne and Korn shells, and is POSIX-conformant. Because of these and other differences, Bash shell scripts are rarely runnable under the Bourne or Korn shell interpreters unless deliberately written with that compatibility in mind, which is becoming less common as Linux becomes more widespread. But in POSIX mode, Bash conforms with POSIX more closely.[49]
Bash supports here documents. Since version 2.05b Bash can redirect standard input (stdin) from a "here string" using the <<< operator.
Bash 3.0 supports in-process regular expression matching using a syntax reminiscent of Perl.[50]
In February 2009,[51] Bash 4.0 introduced support for associative arrays.[10]
Associative array indices are strings, in a manner similar to AWK or Tcl.[52] They can be used to emulate multidimensional arrays. Bash 4 also switches its license to GPL-3.0-or-later; some users suspect this licensing change is why MacOS continues to use older versions.[53] Apple finally stopped using Bash in its operating systems as default shell with the release of MacOS Catalina in 2019.[20]
Brace expansion, also called alternation, is a feature copied from the C shell. It generates a set of alternative combinations. Generated results need not exist as files. The results of each expanded string are not sorted and left to right order is preserved:
Users should not use brace expansions in portable shell scripts, because the Bourne shell does not produce the same output.
When brace expansion is combined with wildcards, the braces are expanded first, and then the resulting wildcards are substituted normally. Hence, a listing of JPEG and PNG images in the current directory could be obtained using:
In addition to alternation, brace expansion can be used for sequential ranges between two integers or characters separated by double dots. Newer versions of Bash allow a third integer to specify the increment.  
When brace expansion is combined with variable expansion (A.K.A. parameter expansion and parameter substitution) the variable expansion is performed after the brace expansion, which in some cases may necessitate the use of the eval built-in, thus:
When Bash starts, it executes the commands in a variety of dot files. Unlike Bash shell scripts, dot files do not typically have execute permission enabled nor an interpreter directive like #!/bin/bash.
The skeleton ~/.bash_profile below is compatible with the Bourne shell and gives semantics similar to csh for the ~/.bashrc and ~/.bash_login. The [ -r filename ] &&  cmd is a short-circuit evaluation that tests if filename exists and is readable, skipping the part after the && if it is not.
Some versions of Unix and Linux contain Bash system startup scripts, generally under the /etc directories. Bash calls these as part of its standard initialization, but other startup files can read them in a different order than the documented Bash startup sequence. The default content of the root user's files may also have issues, as well as the skeleton files the system provides to new user accounts upon setup. The startup scripts that launch the X window system may also do surprising things with the user's Bash startup scripts in an attempt to set up user-environment variables before launching the window manager. These issues can often be addressed using a ~/.xsession or ~/.xprofile file to read the ~/.profile — which provides the environment variables that Bash shell windows spawned from the window manager need, such as xterm or Gnome Terminal.
Invoking Bash with the --posix option or stating set -o posix in a script causes Bash to conform very closely to the POSIX 1003.2 standard.[54] Bash shell scripts intended for portability should take into account at least the POSIX shell standard. Some bash features not found in POSIX are:[54][55]
If a piece of code uses such a feature, it is called a "bashism" – a problem for portable use. Debian's checkbashisms and Vidar Holen's shellcheck can be used to make sure that a script does not contain these parts.[57][58] The list varies depending on the actual target shell: Debian's policy allows some extensions in their scripts (as they are in the dash shell),[55] while a script intending to support pre-POSIX Bourne shells, like autoconf's configure, are even more limited in the features they can use.[59]
Bash uses readline to provide keyboard shortcuts for command line editing using the default (Emacs) key bindings. Vi-bindings can be enabled by running set -o vi.[60]
The Bash shell has two modes of execution for commands: batch, and concurrent mode.
To execute commands in batch (i.e., in sequence) they must be separated by the character ";", or on separate lines:
in this example, when command1 is finished, command2 is executed.
A background execution of command1 can occur using (symbol &) at the end of an execution command, and process will be executed in background returning immediately control to the shell and allowing continued execution of commands.
Or to have a concurrent execution of two command1 and command2, they must be executed in the Bash shell in the following way:
In this case command1 is executed in the background & symbol, returning immediately control to the shell that executes command2 in the foreground.
A process can be stopped and control returned to bash by typing Ctrl+z while the process is running in the foreground.[61]
A list of all processes, both in the background and stopped, can be achieved by running jobs:
In the output, the number in brackets refers to the job id. The plus sign signifies the default process for bg and fg. The text "Running" and "Stopped" refer to the process state. The last string is the command that started the process.
The state of a process can be changed using various commands. The fg command brings a process to the foreground, while bg sets a stopped process running in the background. bg and fg can take a job id as their first argument, to specify the process to act on. Without one, they use the default process, identified by a plus sign in the output of jobs. The kill command can be used to end a process prematurely, by sending it a signal. The job id must be specified after a percent sign:
Bash supplies "conditional execution" command separators that make execution of a command contingent on the exit code set by a precedent command. For example:
Where ./do_something is only executed if the cd (change directory) command was "successful" (returned an exit status of zero) and the echo command would only be executed if either the cd or the ./do_something command return an "error" (non-zero exit status).
For all commands the exit status is stored in the special variable $?. Bash also supports if ...;then ...;else ...;fi and case $VARIABLE in $pattern)...;;$other_pattern)...;; esac forms of conditional command evaluation.
An external command called bashbug reports Bash shell bugs. When the command is invoked, it brings up the user's default editor with a form to fill in. The form is mailed to the Bash maintainers (or optionally to other email addresses).[62][63]
Bash supports programmable completion via built-in complete, compopt, and compgen commands.[64] The feature has been available since the beta version of 2.04 released in 2000.[65][66] These commands enable complex and intelligent completion specification for commands (i.e. installed programs), functions, variables, and filenames.[67]
The complete  and compopt two commands specify how arguments of some available commands or options are going to be listed in the readline input. As of version 5.1 completion of the command or the option is usually activated by the Tab ↹ keystroke after typing its name.[67]
Information box
{'Original author(s)': 'Brian Fox', 'Developer(s)': 'Chet Ramey[1][2]', 'Initial release': 'June 8, 1989; 34 years ago', 'Stable release': '5.2.15[3]  / 13 December 2022', 'Repository': 'git.savannah.gnu.org/cgit/bash.git', 'Written in': 'C', 'Operating system': 'Unix-like[4]\nmacOS (GPL-2.0-or-later; GPL-3.0-or-later available through third parties)\nWindows (GPL-3.0-or-later)[5][6]', 'Platform': 'GNU', 'Available in': 'Multilingual (gettext)', 'Type': 'Unix shell, command language', 'License': 'Since 4.0: GPL-3.0-or-later[7]\n1.11? to 3.2: GPL-2.0-or-later[8]\n0.99? to 1.05?: GPL-1.0-or-later[9][10][11]', 'Website': 'gnu.org/software/bash'}
