32475,
Texteditorsupport,
Editing Wikipedia articles using a full-fledged text editor is often more convenient than a web browser's standard text area. Text editors provide facilities that are very useful for writing and editing articles (especially long articles), such as spell checking, search and replace, macros, syntax highlighting, and alphabetic sorting. They also provide a quick and easy way of saving a local backup copy of an article, possibly for future offline editing. wikEd for Wikipedia (Preferences > Gadgets > Editing) supports some of these features, and some browsers support spell-checking.  In any case, you can select Wikipedia VisualEditor for a visual editing, in your user preferences.
This page contains pointers for adapting several external and in-browser text editors to editing Wikipedia articles. 
A "manual" way of editing in an external GUI text editor is to use copy and paste. Some text editors do not support, or may not be set up to support, various special characters—Chinese characters, non-Latin letters, mathematical symbols, and so on—they are typically replaced with a character that renders as a square. Check in a preview that your editor has not mangled any special characters before saving the edited page. A word processor may also be used, and may be less likely to mishandle special characters.
For some browser/editor software combinations, there are more efficient methods:
If you are using the Mozilla web browser, it is possible to configure an external editor for editing text areas, including the Wikipedia edit area. This then avoids the need to copy and paste the article text between browser and editor. Several solutions exist:
With all these solutions, once you are done editing, you need to save in your editor, then click into the browser's text area and it is updated. You can then hit Preview. If you want to continue editing after the preview, hit Back in your browser, then work in your editor. Alternatively, you can hit Preview before you start editing for the first time, then work in your editor, save, preview, edit some more, save, preview etc., without the need for hitting Back in between.
Certain Firefox forks such as Pale Moon and Waterfox support legacy add-ons. Starting with Firefox 57, all add-ons must be based on the WebExtensions API in order to run.
When the It's All Text! Firefox extension has been installed, a little blue edit button appears in the bottom right corner of the text area. Just click the button to open the contents of the text area in your editor.
However, before you can use It's All Text!, you need to specify the path to your editor in the Preferences dialog box. The Preferences dialog opens automatically when you use It's All Text! for the first time, but you can open it manually as follows: Right click in the text area to open context menu; select "It's All Text" → "Preferences".
If your editor requires some other command line options in addition to the filename, use a shell script (.sh file in Linux and macOS, or .bat in Windows) to call your editor, and specify path to that script instead of calling your editor directly. In addition, you can add filename extension for wiki file type in Preferences dialog, in case your editor uses file type specific configuration.
Once the above is done, you can edit any text area in your editor by clicking at the Edit button at the lower-right corner of the text area. Alternately, you can right-click on the text area. From the "It's All Text" menu, you can choose which filename extension to use for editing.
Next time you use the blue edit button, the extension is the one you used last time.
After editing, just save the file from your editor. The contents are automatically copied to the text area in Firefox. To indicate this, the text area turns yellow briefly.
A temporary file is created for editing and is removed at the end. So if you want to preserve a text file for later editing, you can change the file name and/or save the file to another directory.
Some macros may work in Vim, but not in gVim for some reason (e.g., the macro to format text paragraphs). Or you just want to use Vim within an X terminal as you used to do, instead of using gVim. To invoke Vim within an X terminal window, you can write a shell script (see below) to invoke an X terminal and to run the vim command within that X terminal, or generally your preferred editor. Assume that the filename of this script is wiki.edit.vim, and that you put the script in the directory /home_dir/bin/ so that the path of the script would be
/home_dir/bin/wiki.edit.vim
Put the above path in the Preferences box (instead of /usr/bin/gvim) of It's All Text. It should work. Note that /home_dir/ is the complete path to your home directory from the root (/) directory; don't use ~/ (tilde) instead of /home_dir/; it won't work.
The listing of the script wiki.edit.vim is given below:
Don't forget to make the file executable with $ chmod +x wiki.edit.vim
To get It's All Text to work nicely with Vim in the Mac, you need to install Macvim. When MacVim is installed, a script called mvim is also added. You need to tell It's All Text to use this script and not the MacVim.app file. A good place to keep it is in the same folder your MacVim.app file is (Applications by default).
Lynx allows editing text area content with an external editor. When the cursor is in the text area, one can type Ctrl+X and E — or Ctrl+E and E to invoke a text editor. In addition, Lynx accepts a user-definable key-binding (normally not bound) to invoke the external editor. Some packagers may assign a user-definable binding in Lynx's configuration file.
After saving the file in an external editor, quitting it and returning to Lynx, answer "no" to the Lynx question "Wrap lines to fit displayed area? (n)" by pressing the N key; answering "yes" will otherwise have Lynx wrap lines with normal carriage returns, which will break the document structure. Using article preview is strongly encouraged.
Lynx built-in hard limits line length. In version 2.8.3, find this line in LYGlobalDefs.h:
This can be modified to a longer length (e.g. 8192) and recompiled. If you are unable to recompile Lynx, the following are workaround suggestions.
Lynx is prone to breaking lines longer than 1023 characters: When this happens, a large paragraph with lots of reference data may easily become broken, and articles saved like that may take at best a slightly inconsistent appearance; at worst, complex articles might lose their structure.
The character length limit is dependent on maximum buffer length set for a line, the default size of which is 1023 characters; this behaviour can be observed when moving the cursor to a text area line exceeding the limit, whereby Lynx will issue an alert: "Form field value exceeds buffer length! Trim the tail."
Even if a paragraph of article text on its face is not very long, it may still contain multiple references along with extensive amounts of related code and data for them, which makes an actual paragraph in article code much longer, and in some cases, well beyond the length of the 1023-character limit. When a line of text exceeds that limit and a text file is sent back to the Lynx textarea, Lynx will yield an error message: "Alert! Very long lines have been wrapped!". In such a case it's best not to save article content before such issues have been mitigated.
Therefore, article editors should be careful to follow the character length of longer lines, and where (usually) possible, insert strategic linebreaks with carriage returns (not HTML <BR> tags): Advanced text editors, like vi or VIM, do typically show cursor position within a line in their status areas, and thus allow to gauge line length when the cursor is at the end of a line.
In a longer paragraph of article code containing references, single linebreaks can be inserted within reference code, so long as parameter values themselves are not broken.
Because URLs are typically long, placing these on a new line is handy for comparing article editions, as some textually non-breaking code prepended and/or appended to a URL may lie outside a comparison column's viewport, and this may hinder in discovery of changes made to an article.
If a paragraph line is near the limit or exceeds it by just a few characters, then article editors can choose to optimize code or text:
If a line paragraph still exceeds the 1023-character limit, but does not contain any reference code (or any other wikicode that would work with linebreaks), then users should consider logically breaking that paragraph into two for better legibility.
If accented and international characters fail to show properly, use a terminal program that has support for Unicode (such as uxterm) and set the assumed and display character sets to UTF-8 or greater in Lynx options.
Nevertheless, article content with any special characters — including non-standard Latin, Cyrillic, or other non-Latin languages — are seen in Lynx textareas in the UTF-8 &#xXX; format, which in that form are sent to text editors and then back.
Beware that these UTF-8 glyph representations are not treated as one character, but as six (ö = &#xF6;), and these add to the 1023-character line limit.
Such behaviour is a hindrance to editing non-Latin texts, and even Latin texts that are written in languages that may feature extensive amounts of accented characters.
See #Dealing with special characters for more.
In addition to above instructions, there are intricacies specific to Windows.
If you want to use Wikimedia's secure servers, get a version of Lynx that supports SSL. To find out if yours already does, go to Options and see if the User-Agent header contains OpenSSL.
The assumed character set should be utf-8, as this is also the default charset used by Wikipedia. The display character set can be different, such as cp850, but editable text will always be in utf-8.
In Windows, the display font should be Lucida Console instead of 'Raster fonts', as Lucida Console supports a greater amount of characters. The display font can be changed in window properties: In Windows XP, click the Lynx window icon (to the left of the title), choose Properties, and switch to the Font tab, which typically lists only Raster fonts and Lucida Console.
Configuration files for Lynx are simple text files and can be edited from any text editor that supports Unix linebreaks. In Windows 9x, the built-in text editor for this is WordPad, because Notepad in these old Windows versions does not support the Unix Line Feed.
lynx.cfg is the config file for Lynx; the global config file in Windows is always located in the same folder as the Lynx executable, wherever it has been installed to. A typical location is C:\Program Files\Lynx. If Lynx is installed in that folder, then Windows Vista and newer usually require administrator access to edit the file (via User Account Control).
lynx.rc is a per-user Lynx User Defaults File saved from the Options page. Settings in it take priority over the global config file. In Windows Vista, the per-user User Defaults file can be in C:\Users\Username\AppData\Local\temp\lynx.rc. If the file is in the temp directory, care is advised when using automated cleanup tools like Disk Cleanup.
Lynx Option file syntax is different between global (lynx.cfg) and per-user (lynx.rc) configuration files.
lynx.cfg is extensive; very often, almost all options are placed into it, along with explanatory comments for each option. If it's not so, there's an official online version at lynx.isc.org/lynx2.8.7/lynx2-8-7/lynx.cfg — Keep in mind that if your Lynx version is different, change the numbers in the URL accordingly, as some options may be version-specific.
The best way to find an option is by using the text editor's find feature.
When not in active use, an option is commented out with a hash # and its default setting is on; To use an option, delete the hash character before it. The config file may occasionally not contain a specific option, but it can be added by the user.
The following options are often found as defaults in Lynx binaries compiled for Windows and might not meet formatting conventions used in Wikipedia. These options can be edited from lynx.cfg and are usually not specified in the Options page. Before editing, back up the file and rename it to lynx.cfg.old, for example.
The COLLAPSE_BR_TAGS: option should be set to FALSE, as in the example below:
The reason is that some editors intentionally use more than one <BR> tag, especially in locations where conventional paragraph breaks are not allowed.
Graphical browsers do not show this, since justification is not used. For this, set
As Wikipedia articles very often feature linked content in tables, the numbers in brackets before or next to links may be distracting. Set these following options:
The typical key combination to invoke an out-of-Lynx editor in Windows is Ctrl+x+e and not Ctrl+E+e like in Unices and elsewhere; this can be changed in the config file. Both an internal and external editor can be used, according to taste and preferences. Avoid Windows Notepad for reasons stated above. And only since Windows XP does WordPad have full Unicode support (with some reservations).
An example with Vim, configured to use the mediawiki syntax:
Note the double quotes ^
When using an in-window editor like Vim and after exiting back into Lynx, any colour theme Lynx uses is rendered inoperable (links and buttons not highlighted anymore), so the best practice is to never show colors in Options (in section Appearance), and save the settings.
For MediaWiki Version 1.5 through 1.21, the software allowed you to edit any resource using any external tool.  See Manual:External editors for details. This was removed during the currency of version 1.22
Conkeror can edit text boxes using an external editor by pressing Ctrl+i on a focused text box. Details on setting up this feature can be found on the External Editing page from the Conkeror website.
dwb allows editing a text area with an external editor by typing Ctrl+e when the cursor is in the text area. This key-binding can be changed on the dwb:keys page under the open_editor option, and the editor is defined on the dwb:settings page.
The text-only browser elinks also provides a function to edit text areas. The key combination Ctrl+T calls an external editor, e.g. Vim. This allows also to use syntax highlighting, edit functions, spelling corrections and saving local copies.
Luakit is able to edit text boxes using an external editor by pressing Ctrl+e on the focused text box. editor and open_editor Lua modules powers the external editor functionality. User configuration is done by editing a userconf.lua file and key bindings are changed with the add_binds and remove_binds functions.
Nyxt is able to open an external editor on a current input field. The default keymap is C-c ' when using CUA keybindings. The editor path can be changed by configuring the external-editor-program browser slot. The edit-with-external-editor command is used to open an editor.
qutebrowser can open an external editor on a selected text area by typing Ctrl+e or by using the :open-editor command. Settings can be changed using the :set command, with the editor defined in the editor.command section. The key-binding can be changed by using config.bind() in config.py or with the :bind command.
Vieb can open an external editor on a focused input field by typing Ctrl+i while in Insert mode. To change the mapping for the action, use the imap command on the action.editWithVim action. To change the editor, use the set vimcommand= command.
vimb is able to open an external editor on a hinted form area by typing ;e or by pressing Ctrl+t on a form field while in Input Mode. The editor is defined by changing the :set editor-command setting and changing the key mapping is done by using :map to change mappings. Note that there are various key mapping modes for mapping commands.
vimprobable can open text boxes in an external editor by typing Ctrl+t while in Insert Mode. User configuration is done by editing a vimprobablerc file. To change the key binding, use the map command on the openeditor function. To define a different editor, use the handler command to change the vimprobableedit URI schema.
w3m opens an external editor for text areas by default. To change the external editor, press o to open the Options screen and change the Editor field. If the Editor field is left blank, w3m will use the $EDITOR environment variable.
webmacs can edit text fields using an external editor by pressing Ctrl+x e on a selected text field. Configuring the external editor is done by editing __init__.py found in the ~/.webmacs/init directory and changing the external-editor-command variable. The define_key() and undefine_key() functions define and undefine a command to a keymap respectively.
xombrero is able to edit a selected text element in an external editor by pressing Ctrl+i while in Insert Mode or by entering the :editelement command. Settings can be changed by editing a xombrero.conf file. To change the key binding, create a keybinding entry for the editelement command. The editor is defined by creating an entry for the external_editor setting.
Some command line tools allow you to download articles, edit them using your favorite text editor, and upload the edited articles back into Wikipedia (or into any MediaWiki server). This bypasses the need for a web browser. These are (at least):
In the above example, the command line to upload the four pages in one submission (the 'start' and 'stop' markups drive successively the four different pages Демография, 人口学, Demography and الديمغرافية) is:
Atom requires at least one of the two packages to support syntax highlighting. Install packages using Command-, - Install and search for:
A few Emacs major mode implementations are available for editing MediaWiki syntax:
longlines.el is now part of the default GNU Emacs distribution. The following information is retained for reference.
Wikipedia articles don't use line breaks. Because of this, you may want to install one of the following:
wikipediafs.el can be used along with one of the aforementioned major modes, when using the virtual Wikipedia filesystem.
For jEdit (Java-supporting OSes) there is a plugin available at http://www.djini.de/software/mwjed/ . Apart from providing syntax highlighting for Wikipedia markup, it can communicate directly with the Wikipedia website using the HttpClient component from the Jakarta Project.  (Unavailable as of 2012-03-20.)
Kate (text editor on KDE framework) supports MediaWiki syntax highlighting by default. Choose Tools → Highlighting → Markup → Mediawiki.
It recognizes everything in default markup:
Highlighting can be configured in Settings → Configure Kate → Fonts & Colors → Highlighting Text Styles and select "Markup/MediaWiki" in the drop-down menu.
There is also a highlighting import tool: Settings → Configure Kate → Fonts & Colors → Highlighting Text Styles → Highlight: → Import button.
Kate dynamically wraps lines.
gedit is a cross-platform, free software text editor that comes bundled with Ubuntu Linux by default. A GPL-licensed MediaWiki syntax highlight mode is shipped by default with gedit 3.10 and newer.
For older versions, you can download it at https://github.com/jpfleury/gedit-mediawiki/archive/master.zip, unzip, and copy the language file to the correct folder, or you can run the following in a GNU/Linux shell:
To select the MediaWiki syntax highlight mode, go to the gedit menu View > Highlight Mode > Others and select MediaWiki.
A Clip Library plugin for the NoteTab (Windows) text editor contains some functions to automate wiki markup.
A syntax highlighting mode is available for SubEthaEdit (macOS) as well. After downloading the mode bundle, drop it in /Library/Application Support/SubEthaEdit/Modes/ (system-wide) or ~/Library/Application Support/SubEthaEdit/Modes/ (user-specific). You may need to create the final two directories by hand. The mode will be automatically selected for files with a .wiki or .Wikipedia extension.
A "MediaWiki" bundle is available in the TextMate for macOS bundle subversion repository. The bundle could ne enabled through the app preference pane GUI by checking a tickbox. To learn how to load this bundle manualy, see the TextMate manual page about installing more bundles, or view this shell script that downloads and installs it. The bundle does syntax highlighting, code completion, and other actions.
For Sublime Text 2 users, note that you may enable this bundle as well, since Sublime Text 2 supports TextMate bundles.
Mediawiker is a Sublime Text package that enables editing MediaWiki pages.
More information about the plugin and its configuration can be found in the mediawiker wiki.
For Wikipedia it is necessary to set the https to true, inserting it in the package global or user configuration.
An example configuration for English Wikipedia is the following:
Wiki Tools for VEDIT contains syntax highlighting, keyboard configuration, User and Tools menus and several macros for inserting and editing wiki tags and for some more complex operations such as add/delete/copy/paste columns in a wiki table.
Installation instructions included, as well as instructions for configuring It's All Text! for Vedit.
Please feel free to contribute improvements to the below scripts, or check the vim-devel list if anyone has requested the upload of mediawiki.vim Syntax & FileType plugin. If not, request it and/or post the reasons why they are not here. As of March  2017[update], it is not in the Vim source control tree's "syntax/" directory.)
The below scripts are also posted in the vim.org script collection, where they are occasionally updated (but not since 2011-11-17) with newer versions taken from community contributions on this site. Feel free to remind mvc to upload a newer copy periodically if those become stale, since they were uploaded from his vim.org account.
To make Vim support the MediaWiki markup used on Wikipedia (basically syntax highlighting), save the following lines to "~/.vim/syntax/mediawiki.vim" or "vimfiles\syntax\mediawiki.vim". If any of the directories above don't exist you may create them (the Unix/Linux command is mkdir).
A raw mediawiki.vim file for easy downloading exists on GitHub:https://raw.githubusercontent.com/chikamichi/mediawiki.vim/master/syntax/mediawiki.vim
When using Vim in Windows, creating and saving mediawiki.vim in Vim itself is preferable, otherwise the file may break.
To autodetect files ending in ".wiki", add the following lines to ".vim/ftdetect/mediawiki.vim" or "vimfiles\ftdetect\mediawiki.vim" (or create the file if it doesn't exist):
A raw mediawiki.vim file for easy downloading exists on GitHub:
https://raw.githubusercontent.com/chikamichi/mediawiki.vim/master/ftdetect/mediawiki.vim
File:$HOME/.vim/ftdetect/mediawiki.vim
Alternatively, the command ":setf mediawiki" will temporarily set the syntax for the current file.
If you use the Mozex Firefox extension, Mozex creates a temporary file ending in ".txt" rather than ".wiki" so the above autodetection will not work in combination with that plugin. One solution is to have Mozex invoke vim with these arguments:
A complete editor command can look some thing like that
Wikipedia articles often only have line-breaks at the end of each paragraph, a situation Vim by default doesn't handle as other text editors. Save the following lines to "~/.vim/ftplugin/mediawiki.vim" or "vimfiles\ftplugin\mediawiki.vim" to make it as you may be used to from Notepad:
File:$HOME/.vim/ftplugin/mediawiki.vim
Additional to that you may want to save the following lines to "~/.vim/ftplugin/mediawiki.vim" or "vimfiles\ftplugin\mediawiki.vim" for some more gimmicks
(you may need to put "filetype plugin on" in your vimrc):
File:$HOME/.vim/ftplugin/mediawiki.vim
Add in Syntax menu the option Wiki
File:$HOME/.vim/synmenu.vim
vim-mediawiki-editor can on copy articles directly from vim, display diff between changes version on the server and our etc.
Notepad++ is a free text and source code editor for Microsoft Windows. It allows users to create their own syntax highlighting scheme; users can customize a new scheme using the mediawiki markup scheme, or install an existing version provided by the Wikipedia user MjolnirPants.
Notepad++ supports plugins; there is a 2009 mediaWiki plugin for the 32-bit version that can be downloaded at http://www.cab.i24.cc/projects/wikieditor/.
The previous methods allow a Wikipedia Edit page to be processed more efficiently. LibreOffice (LO) Writer can be used for this purpose; but using LO Writer to convert a formatted document into Wikipedia edit format is also possible. This requires using styles and other LO features, explained in LO Writer Help > MediaWiki Formats; for example the Heading 2 style must be used if a heading is to be enclosed within a pair of "==". This is supported, at least, in LO 5 under Windows 10 with the appropriate 32- or 64-bit Java Runtime Environment (JRE) present and enabled in LO; the procedure is File > Export > MediaWiki (.txt). See Help:WordToWiki.
wikEd is a full-featured in-browser text editor that adds enhanced text processing functions to Wikipedia and other MediaWiki edit pages (as of October 2009[update], wikEd works with Firefox, SeaMonkey, Safari and Google Chrome, but not with Internet Explorer or Opera).
Features include:
wikEd can simply be enabled in Preferences::Gadgets (on wiki installations where wikEd is not installed as a gadget, a small code snippet can be pasted to your common.js page or it can be run locally as a Greasemonkey user script). For detailed installation instructions see the wikEd homepage.
With this Firefox add-on it is possible to make little edits to wiki-articles without having to leave or reload the page, so the flow in reading an article is barely disturbed. It is available at addons.mozilla.org.
Surfingkeys is a Chrome and Firefox extension that brings Vim-like keyboard shortcuts that can be customized using JavaScript. Among the list of features is a Vim editor powered by Ace.
To enter the Vim editor, press I and use a hint letter to pick an input box. Alternatively if a text box was selected via insert mode or mouse click, Ctrl+i opens the editor. For input and select elements, ↵ Enter saves the text. For textarea elements such as for editing a page, Ctrl+↵ Enter will save the text. In all cases, :w will also save the written text and Esc or :q will leave the editor without saving changes.
wasavi is an extension for Chrome, Firefox, and Opera that changes the textarea in a page to a Vim-like editor. Almost all Vim/ex commands are supported. To launch wasavi, press Ctrl+↵ Enter to start the editor.
Wikipedia encodes text using the UTF-8 character set, which allows using many non-English characters and special symbols. Such characters may appear even in articles where you wouldn't expect them due to the use of interwiki links to non-English versions of the article. Therefore, using an editor that does not mangle these characters or replace them with question marks is very important. Check your editor's documentation to make sure that it supports Unicode or UTF-8, and enable it if needed. You don't necessarily need a special editor; recent versions of Notepad and Microsoft Word support Unicode, for example. An extensive list of Unicode-supporting editors is available for Windows and other operating systems (see also: Comparison of text editors).
If your editor does not support UTF-8, then copy-paste from web browser may mangle the characters. For example, pasting from Windows Clipboard automatically converts characters to whatever character set your editor uses and replace any characters not included in this character set with question marks. You can avoid this by using one of the helper applications or browser plugins mentioned above. For example, It's All Text! does not mangle any characters.
When editing an article with special characters using a new editor, using the "Show changes" button (next to "Show preview") to see exactly what your edit will change is a good idea. If areas with special characters that you didn't intend to modify are highlighted as red, that means they will be corrupted, even though both versions may look the same to you because you don't have foreign fonts installed.
BabelPad is a free editor for Windows with special support for dealing with Unicode, and is ideal if you need to determine which of several similar-looking characters an article is using, or deal with hard-to-edit Unicode control codes (like for multidirectional text).


